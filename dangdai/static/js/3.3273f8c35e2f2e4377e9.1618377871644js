webpackJsonp([3],{

/***/ "+1Cb":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "5zde":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("zQR9");
__webpack_require__("qyJz");
module.exports = __webpack_require__("FeBl").Array.from;


/***/ }),

/***/ "8GZk":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "Gu7T":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _from = __webpack_require__("c/Tr");

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};

/***/ }),

/***/ "Lwfs":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "SldL":
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),

/***/ "VGPW":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "Xxa5":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("jyFz");


/***/ }),

/***/ "YzI4":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "c/Tr":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("5zde"), __esModule: true };

/***/ }),

/***/ "exGp":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _promise = __webpack_require__("//Fk");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

/***/ }),

/***/ "fBQ2":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__("evD5");
var createDesc = __webpack_require__("X8DO");

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),

/***/ "jyFz":
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__("SldL");

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),

/***/ "mJxC":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "oCxS":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ./node_modules/babel-runtime/regenerator/index.js
var regenerator = __webpack_require__("Xxa5");
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__("exGp");
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__("Gu7T");
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./src/lib/utils.js
var utils = __webpack_require__("n95b");

// EXTERNAL MODULE: ./node_modules/flv.js/src/flv.js + 38 modules
var flv = __webpack_require__("9vWd");

// EXTERNAL MODULE: ./src/request/api.js
var api = __webpack_require__("2CGT");

// EXTERNAL MODULE: ./node_modules/moment/moment.js
var moment = __webpack_require__("PJh5");
var moment_default = /*#__PURE__*/__webpack_require__.n(moment);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/component/controls/controlsHeader/controlsHeader.vue
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ var controlsHeader = ({
  props: {
    value: {
      default: function _default() {
        return ["", []];
      }
    },
    options: {
      type: [Array, Object],
      default: function _default() {
        return [];
      }
    },
    showSearchDate: {
      type: [Boolean],
      default: function _default() {
        return true;
      }
    }
  },
  data: function data() {
    return {
      formList: {
        dateFromTo: []
      },
      pickerOptions: {
        shortcuts: [{
          text: "今天",
          onClick: function onClick(picker) {
            var end = new Date();
            var start = new Date();
            start.setTime(start.getTime() - 3600 * 1000 * 24 * 0);
            picker.$emit("pick", [start, end]);
          }
        }, {
          text: "昨天",
          onClick: function onClick(picker) {
            var end = new Date();
            var start = new Date();
            start.setTime(start.getTime() - 3600 * 1000 * 24 * 1);
            picker.$emit("pick", [start, end]);
          }
        }, {
          text: "3天前",
          onClick: function onClick(picker) {
            var end = new Date();
            var start = new Date();
            start.setTime(start.getTime() - 3600 * 1000 * 24 * 2);
            picker.$emit("pick", [start, end]);
          }
        }, {
          text: "7天前",
          onClick: function onClick(picker) {
            var end = new Date();
            var start = new Date();
            start.setTime(start.getTime() - 3600 * 1000 * 24 * 6);
            picker.$emit("pick", [start, end]);
          }
        }, {
          text: "14天前",
          onClick: function onClick(picker) {
            var end = new Date();
            var start = new Date();
            start.setTime(start.getTime() - 3600 * 1000 * 24 * 13);
            picker.$emit("pick", [start, end]);
          }
        }, {
          text: "30天前",
          onClick: function onClick(picker) {
            var end = new Date();
            var start = new Date();
            start.setTime(start.getTime() - 3600 * 1000 * 24 * 29);
            picker.$emit("pick", [start, end]);
          }
        }]
      },
      currentDateTime: []
    };
  },
  created: function created() {
    // 当前时间
    var currentTime = moment_default()().format("YYYY-MM-DD 23:59:59");
    // 7天前
    var beforeTime = moment_default()().subtract(6, "days").format("YYYY-MM-DD 00:00:00");
    this.getCurrentArrayTime = [beforeTime, currentTime];
    this.currentDateTime = [beforeTime, currentTime];
    this.value[1] = this.getCurrentArrayTime;
    this.$emit("dateFromTo", this.getCurrentArrayTime);
  },

  methods: {
    selectAll: function selectAll(data) {
      var nodesObj = this.$refs["cascader"].getCheckedNodes();
      // 将当前选中的数据做处理，得到数组的最后一个值并组合成一个数组
      var myArray = [];
      this.value[0].forEach(function (v) {
        myArray.push(v.slice(-1).toString());
      });
      // 将得到的数组变成固定格式的对象
      var newArray = myArray.map(function (item) {
        return {
          id: item
        };
      });
      this.value[2] = newArray;
      this.$emit("input", this.value);
      this.$emit("getSelectAll", nodesObj);
    },
    getSelectData: function getSelectData(data) {
      console.log(data);
      this.$emit("input", this.value);
      this.$emit("dateFromTo", data);
    }
  }
});
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-7eb22ec2","hasScoped":true,"transformToRequire":{"video":["src","poster"],"source":"src","img":"src","image":"xlink:href"},"buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/component/controls/controlsHeader/controlsHeader.vue
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"controlsHeader"},[_vm._t("controlsName"),_vm._v(" "),_c('div',{staticClass:"controlsHeaderDate"},[_c('el-cascader',{ref:"cascader",staticStyle:{"width":"280px"},attrs:{"placeholder":"选择大区/城市/项目","options":_vm.options,"props":{ value: 'id', label: 'name', multiple: true },"collapse-tags":"","filterable":"","size":"small"},on:{"change":_vm.selectAll},model:{value:(_vm.value[0]),callback:function ($$v) {_vm.$set(_vm.value, 0, $$v)},expression:"value[0]"}}),_vm._v(" "),(_vm.showSearchDate)?_c('el-date-picker',{staticStyle:{"width":"260px"},attrs:{"size":"small","type":"daterange","picker-options":_vm.pickerOptions,"range-separator":"至","start-placeholder":"开始日期","end-placeholder":"结束日期","value-format":"yyyy-MM-dd HH:mm:ss","default-time":['00:00:00', '23:59:59'],"align":"right"},on:{"change":_vm.getSelectData},model:{value:(_vm.value[1]),callback:function ($$v) {_vm.$set(_vm.value, 1, $$v)},expression:"value[1]"}}):_vm._e()],1)],2)}
var staticRenderFns = []
var esExports = { render: render, staticRenderFns: staticRenderFns }
/* harmony default export */ var controlsHeader_controlsHeader = (esExports);
// CONCATENATED MODULE: ./src/component/controls/controlsHeader/controlsHeader.vue
function injectStyle (ssrContext) {
  __webpack_require__("+1Cb")
}
var normalizeComponent = __webpack_require__("VU/8")
/* script */


/* template */

/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = injectStyle
/* scopeId */
var __vue_scopeId__ = "data-v-7eb22ec2"
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  controlsHeader,
  controlsHeader_controlsHeader,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)

/* harmony default export */ var controls_controlsHeader_controlsHeader = (Component.exports);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/component/controls/video/controlsVideo.vue



//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




// import { videoPlayer } from "vue-video-player";

/* harmony default export */ var controlsVideo = ({
  components: { controlsHeader: controls_controlsHeader_controlsHeader },
  data: function data() {
    return {
      sel: {
        a: ["", []]
      },
      // 隐藏顶部搜索日期
      showSearchDate: false,
      // 获取选择tree树结构数据
      controlsTreeData: [],
      controlsSearchVideoRes: [],
      myObj: [],
      getNewMyObj: [],
      getChangeMyObj: [],
      player: null,
      videoAnchangId: "",
      VideoSXTId: "",
      VideoSource: "",
      result_flv: [],
      aaaArray: [],
      queryArray: [],
      setNumber: 0,
      interval: null,
      getIndex: 0,
      loading: false,
      loadingStatus: "视频正在加载中...",
      httpurl: "",
      getItem: [],
      imgParam: '' //案场图片路径
    };
  },
  mounted: function mounted() {
    var param = JSON.parse(window.localStorage.getItem("param"));
    this.imgParam = param.imagePathPrefix;
    this.getControlsTreeData();
    this.getRandomData();
  },

  watch: {
    "sel.a": function selA(data) {
      var _this2 = this;

      this.queryArray = this.sel.a[2];
      // 通过对象对比得出差值
      this.getNewMyObj = [].concat(toConsumableArray_default()(this.myObj)).filter(function (x) {
        return [].concat(toConsumableArray_default()(_this2.queryArray)).some(function (y) {
          return y.id == x.id;
        });
      });
      // 如果当前全部取消选中，则显示所有数据
      if (this.queryArray.length == 0) {
        this.getNewMyObj = this.myObj;
      }
      this.getChangeMyObj = this.getNewMyObj;
    }
  },
  methods: {
    // 控制台大区现则dom树
    getControlsTreeData: function getControlsTreeData() {
      var _this3 = this;

      this.$request.searchAnchang({
        admin: JSON.parse(Object(utils["a" /* Decrypt */])(window.sessionStorage.getItem("rootAdminInfo")))
      }).then(function () {
        var _ref = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(res) {
          return regenerator_default.a.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  // console.log(res);
                  if (res.status == 200) {
                    res.data.data.flatOrgs.forEach(function (v) {
                      return v.flvUrl = {}, v.loading = false;
                    });
                    // 获取选择tree树结构数据
                    _this3.controlsTreeData = res.data.data.treeNodes;
                    // 获取顶部所有案场id对应的视频数据
                    _this3.controlsSearchVideoRes = res.data.data.flatOrgs;

                    _this3.myObj = res.data.data.flatOrgs;

                    _this3.getNewMyObj = _this3.myObj;
                  }

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, _this3);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    },

    //向后台发送网络状态
    sendServer: function sendServer(net) {
      var that = this;
      var index = that.getIndex;
      var item = this.getNewMyObj[index];
      console.log(this.getNewMyObj[index]);
      this.setNumber++;
      if (this.setNumber == 1) {
        this.$request.setNetworkEnv({
          anchangId: this.videoAnchangStr,
          intranet: net
        }).then(function (response) {
          console.log(response);
          //网络状态设置成功后再开始播放
          that.playVideoFn(index, item);
        });
      }
    },
    getRandomData: function getRandomData() {
      // 默认每次随机生成四个案场的视频且不重复
      // 根据顶部选择大区的查询该区域指定数据进行随机循环
      // 如果操作顶部选择大区，则根据范围搜索大区数据做循环
      // 否则全部大区进行随机循环
      if (this.getChangeMyObj.length > 0) {
        if (this.getChangeMyObj.length >= 4) {
          var c = [],
              b = [];
          while (b.length < 4) {
            c = b.map(function (v) {
              return v.id;
            });
            var m = Math.floor(Math.random() * this.getChangeMyObj.length);
            if (c.includes(this.getChangeMyObj[m].id) == false) {
              b.push(this.getChangeMyObj[m]);
            }
          }
          this.getNewMyObj = b;
        }
      } else {
        if (this.myObj.length >= 4) {
          var c = [],
              b = [];
          while (b.length < 4) {
            c = b.map(function (v) {
              return v.id;
            });
            var _m = Math.floor(Math.random() * this.myObj.length);
            if (c.includes(this.myObj[_m].id) == false) {
              b.push(this.myObj[_m]);
            }
          }
          this.getNewMyObj = b;
        }
      }
    },
    randomVideo: function randomVideo() {
      this.getRandomData();
      // 点击播放的时候获取上一次点击的数据
      this.stopVideo();
    },
    getVideosPlay: function getVideosPlay(index, item) {
      var _this4 = this;

      this.getItem = item;
      // 点击播放的时候获取上一次点击的数据
      this.stopVideo();
      item.loading = true;
      this.loadingStatus = "视频正在准备中...";

      this.getIndex = index;
      this.videoAnchangStr = this.getNewMyObj[index].id;
      console.log(this.videoAnchangStr);
      //判断内外网
      this.setNumber = 0;
      var flag = "";
      this.$request.getServiceConfigs({
        anchangId: this.videoAnchangStr
      }).then(function (response) {
        var res = response.data;
        console.log(res);
        if (res.code == "1000") {
          var that = _this4;
          if (res.data.marginIp) {
            var ip = res.data.marginIp.split("//")[1].split(":")[0];
            console.log(ip);
            axios.get("https://" + ip + "/ping").then(function (response) {
              console.log(response);
              if (response.status == "200") {
                flag = 1; //局域网内
                that.sendServer("true");
                item.loading = false;
              } else {
                that.sendServer("false");
                item.loading = false;
              }
            }).catch(function (error) {
              that.sendServer("false");
              item.loading = false;
            });
            //5秒未应答认为是外网
            setTimeout(function () {
              if (flag == "") {
                that.sendServer("false");
                item.loading = false;
              }
            }, 5000);
          } else {
            that.sendServer("false");
            item.loading = false;
          }
        }
      });
    },
    playVideoFn: function playVideoFn(index, item) {
      var _this5 = this;

      console.log(index, item);
      this.httpurl = item.pushUrl;
      item.loading = true;
      // 点击播放的时候获取上一次点击的数据
      this.stopVideo();
      this.getIndex = index;
      this.videoAnchangStr = this.getNewMyObj[index].id;
      this.videoAnchangName = this.getNewMyObj[index].name;
      // 获取案场id
      this.videoAnchangId = [this.videoAnchangStr].map(String);
      console.log(this.videoAnchangStr, "---", this.videoAnchangName, "---", this.videoAnchangId);
      this.$request.searchAnchangIds(this.videoAnchangId).then(function (res) {
        if (res.data.msg && res.data.data) {
          // console.log(res.data.data)
          if (res.data.data[_this5.videoAnchangId]) {
            var searchFlvUrl = res.data.data[_this5.videoAnchangId].flvUrl;
            var seatchHttps = RegExp(/http/);
            if (searchFlvUrl.match(seatchHttps)) {
              // 获取摄像头id
              _this5.VideoSXTId = res.data.data[_this5.videoAnchangId].cameraId || "";
              // 获取视频资源url
              _this5.VideoSource = res.data.data[_this5.videoAnchangId].flvUrl || "";
            } else {
              // 获取摄像头id
              _this5.VideoSXTId = res.data.data[_this5.videoAnchangId].cameraId || "";
              // 获取视频资源url
              _this5.VideoSource = "https:////fk.aiseep.com:/live?port=8031&app=live&stream=192.168.10.240ceshi";
            }
          } else {
            // 获取摄像头id
            _this5.VideoSXTId = "";
            // 获取视频资源url
            _this5.VideoSource = "https:////fk.aiseep.com:/live?port=8031&app=live&stream=192.168.10.240ceshi";
          }
          console.log(_this5.VideoSXTId, "---", _this5.VideoSource);
          // 判断当前是否存在摄像头，如果存在，执行播放模块逻辑，否则直接返回播放失败
          if (_this5.VideoSXTId) {
            _this5.$request.GdoLive({
              anchangId: _this5.videoAnchangStr,
              id: _this5.VideoSXTId
            }).then(function (res) {
              console.log(res);
              if (res.data.code == 1000) {
                _this5.liveCmdId = res.data.data.cmdId;
                var count = 0;
                var flag = 0;
                var cmdId = res.data.data.cmdId;
                var playUrl = res.data.data.playUrl;
                var _this = _this5;
                if (cmdId == -1) {
                  if (flv["a" /* default */].isSupported()) {
                    _this5.player = flv["a" /* default */].createPlayer({
                      type: "flv",
                      isLive: true,
                      //url: this.VideoSource
                      url: playUrl
                    });
                    _this5.player.on("error", function (e) {
                      console.log(e);
                    });
                    _this5.player.attachMediaElement(_this5.$refs["player" + (index + 1)][0]);
                    try {
                      _this5.player.load();
                      // 开启自动播放
                      _this5.player.play();
                      // 关闭自动播放
                      // this.player.pause();
                    } catch (error) {
                      console.log(error);
                    }
                  }
                  item.loading = false;
                  _this5.loadingStatus = "视频正在加载中...";
                } else {
                  var func = function func() {
                    var _this6 = this;

                    //定时任务
                    count++;
                    console.log(count);
                    _this.$request.checkLive({
                      cmdId: cmdId
                    }).then(function (response) {
                      console.log(response);
                      if (response.data.data.code == "3") {
                        if (flv["a" /* default */].isSupported()) {
                          _this.player = flv["a" /* default */].createPlayer({
                            type: "flv",
                            isLive: true,
                            //url: _this.VideoSource
                            url: playUrl
                          });
                          _this.player.on("error", function (e) {
                            console.log(e);
                          });
                          _this.player.attachMediaElement(_this.$refs["player" + (index + 1)][0]);
                          try {
                            _this.player.load();
                            // 开启自动播放
                            _this.player.play();
                            // 关闭自动播放
                            // this.player.pause();
                            flag = 1;
                          } catch (error) {
                            console.log(error);
                          }
                        }
                        item.loading = false;
                        clearInterval(_this.interval); //停止
                      }
                      if (count == 30 && flag == 0) {
                        item.loading = false;
                        _this6.loadingStatus = "获取视频失败！";
                        _this.$message({
                          type: "error",
                          message: "获取视频失败",
                          duration: 1000
                        });
                        clearInterval(_this.interval); //停止
                      }
                    }).catch(function (error) {
                      _this.$message({
                        type: "error",
                        message: "获取视频失败",
                        duration: 1000
                      });
                      console.log("error=", error);
                      clearInterval(_this.interval); //停止
                    });
                  };

                  item.loading = true;
                  _this5.loadingStatus = "视频正在检查中...";

                  _this.interval = setInterval(func, 1000); //轮询
                }
              }
            });
          } else {
            _this5.loadingStatus = "因为没获取到摄像头ID，所以当前视频播放失败";
            item.loading = false;
            _this5.stopVideo();
            _this5.$message({
              type: "error",
              message: "因为没获取到摄像头ID，所以当前视频播放失败",
              duration: 1000
            });
          }
        }
      });
    },

    // 点击播放的时候获取上一次点击的数据
    stopVideo: function stopVideo() {
      console.log(this.getIndex);
      var that = this;
      clearInterval(this.interval); //停止
      if (this.VideoSXTId) {
        var param = void 0;
        // if (this.liveCmdId == -1) {
        //   param = {
        //     anchangId: this.videoAnchangStr,
        //     id: this.VideoSXTId
        //   };
        // } else {
        param = {
          anchangId: this.videoAnchangStr,
          id: this.VideoSXTId,
          cmdId: this.liveCmdId
        };
        // }
        // 当点击随机视频的时候，停掉并销毁当前播放的视频
        // that.player.pause();
        // that.player.destroy();
        // 先用笨的办法清空video的src
        this.$refs["player" + 1][0].src = "";
        this.$refs["player" + 2][0].src = "";
        this.$refs["player" + 3][0].src = "";
        this.$refs["player" + 4][0].src = "";
        console.log(this.getItem);
        this.getItem.loading = false;

        this.httpurl = "";
        this.$request.GendLive(param).then(function (res) {
          console.log(res);
        });
      }
    }
  },
  beforeDestroy: function beforeDestroy() {
    // let _this = this
    // _this.player.destroy();
    this.stopVideo();
  }
});
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-1c9e2ea8","hasScoped":false,"transformToRequire":{"video":["src","poster"],"source":"src","img":"src","image":"xlink:href"},"buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/component/controls/video/controlsVideo.vue
var controlsVideo_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('controlsHeader',{staticStyle:{"margin-top":"30px"},attrs:{"options":_vm.controlsTreeData,"showSearchDate":_vm.showSearchDate},model:{value:(_vm.sel.a),callback:function ($$v) {_vm.$set(_vm.sel, "a", $$v)},expression:"sel.a"}},[_c('div',{staticClass:"controlsHeaderName",attrs:{"slot":"controlsName"},slot:"controlsName"},[_c('div',{staticStyle:{"float":"left"}},[_c('h1',[_vm._v("远程巡检")]),_vm._v(" "),_c('h2',[_vm._v("案场巡检概览")])]),_vm._v(" "),_c('div',{staticClass:"changeSomething"},[_c('span',{staticStyle:{"cursor":"pointer"},on:{"click":_vm.randomVideo}},[_c('i',{staticClass:"el-icon-refresh"}),_vm._v(" 换一批")])])])]),_vm._v(" "),_c('div',{staticStyle:{"width":"100%","box-sizing":"border-box","padding":"0 5px"}},[_c('el-row',{staticStyle:{"margin-left":"0","margin-right":"0","display":"flex"},attrs:{"gutter":10}},_vm._l((_vm.getNewMyObj),function(item,index){return (index <= 3)?_c('el-col',{key:index,attrs:{"span":6}},[[_c('div',{directives:[{name:"loading",rawName:"v-loading",value:(item.loading),expression:"item.loading"}],staticClass:"videoItem",attrs:{"element-loading-text":_vm.loadingStatus},on:{"click":function($event){return _vm.getVideosPlay(index, item)}}},[_c('video',{ref:("player" + (index + 1)),refInFor:true,staticClass:"video",attrs:{"muted":"","autoplay":"","controls":"","poster":_vm.imgParam+item.imageName},domProps:{"muted":true}})]),_vm._v(" "),_c('div',{staticClass:"videoName"},[_vm._v(_vm._s(item.name))])]],2):_vm._e()}),1)],1)],1)}
var controlsVideo_staticRenderFns = []
var controlsVideo_esExports = { render: controlsVideo_render, staticRenderFns: controlsVideo_staticRenderFns }
/* harmony default export */ var video_controlsVideo = (controlsVideo_esExports);
// CONCATENATED MODULE: ./src/component/controls/video/controlsVideo.vue
function controlsVideo_injectStyle (ssrContext) {
  __webpack_require__("Lwfs")
}
var controlsVideo_normalizeComponent = __webpack_require__("VU/8")
/* script */


/* template */

/* template functional */
var controlsVideo___vue_template_functional__ = false
/* styles */
var controlsVideo___vue_styles__ = controlsVideo_injectStyle
/* scopeId */
var controlsVideo___vue_scopeId__ = null
/* moduleIdentifier (server only) */
var controlsVideo___vue_module_identifier__ = null
var controlsVideo_Component = controlsVideo_normalizeComponent(
  controlsVideo,
  video_controlsVideo,
  controlsVideo___vue_template_functional__,
  controlsVideo___vue_styles__,
  controlsVideo___vue_scopeId__,
  controlsVideo___vue_module_identifier__
)

/* harmony default export */ var controls_video_controlsVideo = (controlsVideo_Component.exports);

// EXTERNAL MODULE: ./node_modules/babel-runtime/core-js/json/stringify.js
var stringify = __webpack_require__("mvHQ");
var stringify_default = /*#__PURE__*/__webpack_require__.n(stringify);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/component/controls/viewBoard/viewBoard.vue



//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ var viewBoard = ({
  components: { controlsHeader: controls_controlsHeader_controlsHeader },
  data: function data() {
    return {
      sel: {
        b: ["", []]
      },
      // 获取选择tree树结构数据
      controlsTreeData: [],
      // 隐藏顶部搜索日期
      showSearchDate: false,
      // 组合自定义新对象
      getNewFormData: [],
      // 获取当前大区案场所有的id
      getFullAreaId: [],
      // 集合当前案场所有id
      getAnchangDataId: [],
      // 获取看板数据
      controlsDataBoard: []
    };
  },
  mounted: function mounted() {
    this.getControlsTreeData();
  },

  watch: {
    "sel.b": function selB(data) {
      var _this = this;

      this.getNewFormData = { anchangs: this.sel.b[2] };
      console.log(this.getNewFormData);
      if (this.getNewFormData.anchangs.length == 0) {
        // 如果当前选择为空，那么重新执行接口，展示默认全部区域的数据
        this.getControlsTreeData();
      } else {
        // 监听选择器的id并搜索对应大区的数据
        this.$request.todayCountStat(this.getNewFormData).then(function (res) {
          console.log(res);
          if (res.status == 200) {
            _this.controlsDataBoard = res.data.data;
          }
        });
      }
    }
  },
  methods: {
    // 控制台大区现则dom树
    getControlsTreeData: function getControlsTreeData() {
      var _this2 = this;

      return asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {
        var newArray;
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this2.$request.searchAnchang({
                  admin: JSON.parse(Object(utils["a" /* Decrypt */])(window.sessionStorage.getItem("rootAdminInfo")))
                }).then(function (res) {
                  // console.log(res);
                  if (res.status == 200) {
                    // 获取选择tree树结构数据
                    _this2.controlsTreeData = res.data.data.treeNodes;
                    _this2.getFullAreaId = res.data.data.flatOrgs;
                  }
                });

              case 2:
                // 获取当前所有案场id
                _this2.getFullAreaId.forEach(function (v) {
                  _this2.getAnchangDataId.push(v.id);
                });
                // 将得到的数组变成固定格式的对象
                newArray = _this2.getAnchangDataId.map(function (item) {
                  return {
                    id: item
                  };
                });
                // console.log({ anchangs: newArray });
                // 获取数据看板接口数据

                _this2.$request.todayCountStat({ anchangs: newArray }).then(function (res) {
                  // console.log(res);
                  if (res.status == 200) {
                    _this2.controlsDataBoard = res.data.data;
                  }
                });

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }))();
    },
    gotoDetail_baobei: function gotoDetail_baobei() {
      this.$router.push({ path: '/fengkong/fengkong?type=2' });
      // 当前时间
      var currentTime = moment_default()().format("YYYY-MM-DD 00:00:00");
      // 1天前
      var beforeTime = moment_default()().subtract(0, "days").format("YYYY-MM-DD 23:59:59");
      this.getCurrentArrayTime = [beforeTime, currentTime];
      this.$store.commit("getSearchFromData_report", this.getCurrentArrayTime);
    },
    gotoDetail_qianyue: function gotoDetail_qianyue() {
      this.$router.push({ path: '/fengkong/fengkong?type=0' });
      // 当前时间
      var currentTime = moment_default()().format("YYYY-MM-DD 00:00:00");
      // 1天前
      var beforeTime = moment_default()().subtract(0, "days").format("YYYY-MM-DD 23:59:59");
      this.getCurrentArrayTime = [beforeTime, currentTime];
      this.$store.commit("getSearchFromData_signUp", this.getCurrentArrayTime);

      this.getNewFormData = { anchangs: this.sel.b[2] };
      console.log(this.getNewFormData);

      window.sessionStorage.setItem("fieldId02", stringify_default()(this.getNewFormData));
      window.sessionStorage.setItem("fieldId03", stringify_default()(this.getAnchangDataId));
      console.log(stringify_default()(this.getAnchangDataId));
    }
  }
});
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-46fe2c78","hasScoped":true,"transformToRequire":{"video":["src","poster"],"source":"src","img":"src","image":"xlink:href"},"buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/component/controls/viewBoard/viewBoard.vue
var viewBoard_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('controlsHeader',{attrs:{"options":_vm.controlsTreeData,"showSearchDate":_vm.showSearchDate},on:{"getSelectAll":_vm.getSelectAll,"dateFromTo":_vm.dateFromTo},model:{value:(_vm.sel.b),callback:function ($$v) {_vm.$set(_vm.sel, "b", $$v)},expression:"sel.b"}},[_c('div',{staticClass:"controlsHeaderName",attrs:{"slot":"controlsName"},slot:"controlsName"},[_c('h1',[_vm._v("数据看板")]),_vm._v(" "),_c('h2',[_vm._v("实时数据")])])]),_vm._v(" "),_c('div',{staticClass:"app_controls_count"},[_c('div',{staticClass:"app_controls_count_item"},[_c('el-card',{staticClass:"box-card"},[_c('div',{staticClass:"clearfix",attrs:{"slot":"header"},slot:"header"},[_c('span',[_vm._v("报备人数")])]),_vm._v(" "),_c('div',{staticClass:"box-body"},[_c('el-tag',{attrs:{"type":"success","size":"medium"}},[_vm._v("今日")]),_vm._v(" "),_c('span',{staticClass:"num"},[_c('i',{staticClass:"el-icon-plus"}),_vm._v(" "),_c('span',{staticClass:"color"},[_vm._v(_vm._s(_vm.controlsDataBoard.reportCount || 0))])])],1)])],1),_vm._v(" "),_c('div',{staticClass:"app_controls_count_item"},[_c('el-card',{staticClass:"box-card"},[_c('div',{staticClass:"clearfix",attrs:{"slot":"header"},slot:"header"},[_c('span',[_vm._v("签约人数")])]),_vm._v(" "),_c('div',{staticClass:"box-body"},[_c('el-tag',{attrs:{"type":"success","size":"medium"}},[_vm._v("今日")]),_vm._v(" "),_c('span',{staticClass:"num"},[_c('i',{staticClass:"el-icon-plus"}),_vm._v(" "),_c('span',{staticClass:"color"},[_vm._v(_vm._s(_vm.controlsDataBoard.contractCount || 0))])])],1)])],1)])],1)}
var viewBoard_staticRenderFns = []
var viewBoard_esExports = { render: viewBoard_render, staticRenderFns: viewBoard_staticRenderFns }
/* harmony default export */ var viewBoard_viewBoard = (viewBoard_esExports);
// CONCATENATED MODULE: ./src/component/controls/viewBoard/viewBoard.vue
function viewBoard_injectStyle (ssrContext) {
  __webpack_require__("VGPW")
}
var viewBoard_normalizeComponent = __webpack_require__("VU/8")
/* script */


/* template */

/* template functional */
var viewBoard___vue_template_functional__ = false
/* styles */
var viewBoard___vue_styles__ = viewBoard_injectStyle
/* scopeId */
var viewBoard___vue_scopeId__ = "data-v-46fe2c78"
/* moduleIdentifier (server only) */
var viewBoard___vue_module_identifier__ = null
var viewBoard_Component = viewBoard_normalizeComponent(
  viewBoard,
  viewBoard_viewBoard,
  viewBoard___vue_template_functional__,
  viewBoard___vue_styles__,
  viewBoard___vue_scopeId__,
  viewBoard___vue_module_identifier__
)

/* harmony default export */ var controls_viewBoard_viewBoard = (viewBoard_Component.exports);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/component/controls/echarts/echarts.vue
//
//
//
//
//

/* harmony default export */ var echarts = ({
  props: {
    eChartDataList: {
      type: [Array, Object],
      defauult: function defauult() {
        return [];
      }
    },
    eChartX: {
      type: [Array, Object],
      defauult: function defauult() {
        return [];
      }
    },
    myChartsId: {
      type: [String, Number],
      default: function _default() {
        return "";
      }
    }
  },
  data: function data() {
    return {
      myChart: "",
      timer: "",
      time: ""
    };
  },

  watch: {
    eChartDataList: {
      handler: function handler(v, x) {
        this.drawLine();
      },

      deep: true
    }
  },
  mounted: function mounted() {
    var _this = this;

    // 动态创建echarts
    // const echartsDiv = document.getElementById("echartsDiv");
    // const echartsNood = document.createElement("div");
    // console.dir(echartsNood);
    // console.log(echartsDiv);
    // this.time = new Date().getTime();
    // echartsNood.id = "myChart" + this.time;
    // echartsNood.style.flex = "1";
    // echartsNood.style.height = "350px";
    // console.log(echartsNood)
    // echartsDiv.appendChild(echartsNood);

    this.$nextTick(function () {
      _this.drawLine();
    });
    // echarts根据不同尺寸窗口自动调整
    window.onresize = function () {
      clearTimeout(_this.timer);
      _this.timer = setTimeout(function () {
        _this.myChart.resize();
      }, 300);
    };
  },

  methods: {
    drawLine: function drawLine() {
      // 基于准备好的dom，初始化echarts实例
      this.myChart = this.$echarts.init(document.getElementById(this.myChartsId));
      // 绘制图表
      this.myChart.setOption({
        title: {
          text: "报备统计",
          subtext: "",
          x: "center",
          y: "top",
          textAlign: "left",
          textStyle: {
            fontStyle: "normal",
            fontWeight: "normal",
            fontSize: 16,
            align: "center"
          }
        },
        tooltip: {
          trigger: "axis"
        },
        legend: {
          data: ["签约量", "已核验", "待核验", "疑似风险", "确认风险"],
          top: "30"
        },
        toolbox: {
          show: true,
          right: '5%',
          feature: {
            dataView: { readOnly: false },
            magicType: { type: ['line', 'bar'] },
            restore: {},
            saveAsImage: {}
          }
        },
        grid: {
          left: "1%",
          right: "4%",
          bottom: "3%",
          containLabel: true
        },
        xAxis: {
          type: "category",
          boundaryGap: false,
          data: this.eChartX
        },
        yAxis: {
          type: "value"
        },
        series: this.eChartDataList
      });
    }
  }
});
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-7d3354d0","hasScoped":true,"transformToRequire":{"video":["src","poster"],"source":"src","img":"src","image":"xlink:href"},"buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/component/controls/echarts/echarts.vue
var echarts_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"echartsDiv"}},[_c('div',{style:({ flex: '1', height: '350px' }),attrs:{"id":_vm.myChartsId}})])}
var echarts_staticRenderFns = []
var echarts_esExports = { render: echarts_render, staticRenderFns: echarts_staticRenderFns }
/* harmony default export */ var echarts_echarts = (echarts_esExports);
// CONCATENATED MODULE: ./src/component/controls/echarts/echarts.vue
function echarts_injectStyle (ssrContext) {
  __webpack_require__("yJZL")
}
var echarts_normalizeComponent = __webpack_require__("VU/8")
/* script */


/* template */

/* template functional */
var echarts___vue_template_functional__ = false
/* styles */
var echarts___vue_styles__ = echarts_injectStyle
/* scopeId */
var echarts___vue_scopeId__ = "data-v-7d3354d0"
/* moduleIdentifier (server only) */
var echarts___vue_module_identifier__ = null
var echarts_Component = echarts_normalizeComponent(
  echarts,
  echarts_echarts,
  echarts___vue_template_functional__,
  echarts___vue_styles__,
  echarts___vue_scopeId__,
  echarts___vue_module_identifier__
)

/* harmony default export */ var controls_echarts_echarts = (echarts_Component.exports);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/component/controls/signUp/signUpBoard.vue


//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ var signUpBoard = ({
  components: {
    controlsHeader: controls_controlsHeader_controlsHeader,
    echarts: controls_echarts_echarts
  },
  data: function data() {
    return {
      sel: {
        b: ["", []]
      },
      // 获取选择tree树结构数据
      controlsTreeData: [],
      // 组合自定义新对象
      getNewFormData: [],
      // 集合当前案场所有id
      getAnchangDataId: [],
      // 获取当前大区案场所有的id
      getFullAreaId: [],
      // 自定义顶部签约看板对象
      getSignUpData: [{
        title: "",
        value: ""
      }, {
        title: "",
        value: ""
      }, {
        title: "",
        value: ""
      }, {
        title: "",
        value: ""
      }, {
        title: "",
        value: ""
      }, {
        title: "",
        value: ""
      }],
      // 签约看板右侧柱状图
      channelStatList: [],
      // 签约看板左侧echarts图
      eChartDataList: [],
      eChartX: [],
      noTableData: false,
      // 疑似风险提示
      maybeRiskMsgList: [],
      // 确认风险提示
      sureRiskMsgList: [],
      // 待核验
      uncheckRiskMsgList: [],
      getMyChartsId: ""
    };
  },

  watch: {
    "sel.d": function selD(data) {
      var _this = this;

      // console.log("d");
      // console.log(data[1][0], data[1][1]);
      // 获取当前所有案场id
      this.getFullAreaId.forEach(function (v) {
        _this.getAnchangDataId.push(v.id);
      });
      // 将得到的数组变成固定格式的对象
      var newArray = this.getAnchangDataId.map(function (item) {
        return {
          id: item
        };
      });
      this.getNewFormData = {
        anchangs: this.sel.d[2] || newArray,
        startDateStr: data[1][0],
        endDateStr: data[1][1]
      };

      // console.log(this.getNewFormData);
      if (this.getNewFormData.anchangs.length == 0) {
        this.getControlsTreeData();
      } else {
        this.$request.contractStat(this.getNewFormData).then(function (res) {
          console.log(res);
          if (res.status == 200) {
            // 自定义顶部签约看板对象
            _this.getSignUpData = [{
              title: "当前签约",
              value: res.data.data.totalCount
            }, {
              title: "渠道签约",
              value: res.data.data.channelCount
            }, {
              title: "疑似风险",
              value: res.data.data.maybeRiskCount
            }, {
              title: "确认风险",
              value: res.data.data.sureRiskCount
            }, {
              title: "撤销飞单",
              value: res.data.data.cancelRiskCount
            }, {
              title: "待核验",
              value: res.data.data.uncheckCount
            }];
            // 疑似风险提示
            _this.maybeRiskMsgList = res.data.data.maybeRiskMsgList;
            // 确认风险提示
            _this.sureRiskMsgList = res.data.data.sureRiskMsgList;
            // 待核验
            _this.uncheckRiskMsgList = res.data.data.uncheckRiskMsgList;
            // console.log(res.data.data.sureRiskMsgList);
            // 签约看板右侧柱状图
            _this.channelStatList = res.data.data.channelStatList;
            // console.log(this.channelStatList.length == 1);
            if (_this.channelStatList.length == 1) {
              _this.noTableData = false;
            } else {
              _this.noTableData = true;
            }
            // 签约看板左侧echarts图
            _this.eChartDataList = res.data.data.eChartDataList;
            // 自定义线条的颜色
            var colors = ["rgb(91,155,213)", "rgb(0, 187, 122)", "rgb(165,165,165)", "rgb(255,193,2)", "rgb(255,0,0)"];
            _this.eChartDataList.forEach(function (v, index) {
              // console.log(index, colors[index]);
              v.itemStyle = {
                normal: {
                  color: colors[index],
                  lineStyle: {
                    color: colors[index]
                  }
                }
              };
            });
            _this.eChartX = res.data.data.eChartX;
          }
        });
      }
    }
  },
  mounted: function mounted() {
    this.getControlsTreeData();
    this.dateFromTo();
    this.getMyChartsId = "myCharts02";
  },

  methods: {
    // 控制台大区现则dom树
    getControlsTreeData: function getControlsTreeData() {
      var _this2 = this;

      return asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {
        var newArray;
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this2.$request.searchAnchang({
                  admin: JSON.parse(Object(utils["a" /* Decrypt */])(window.sessionStorage.getItem("rootAdminInfo")))
                }).then(function (res) {
                  if (res.status == 200) {
                    // 获取选择tree树结构数据
                    _this2.controlsTreeData = res.data.data.treeNodes;
                    _this2.getFullAreaId = res.data.data.flatOrgs;
                  }
                });

              case 2:
                // 获取当前所有案场id
                _this2.getFullAreaId.forEach(function (v) {
                  _this2.getAnchangDataId.push(v.id);
                });
                // 将得到的数组变成固定格式的对象
                newArray = _this2.getAnchangDataId.map(function (item) {
                  return {
                    id: item
                  };
                });
                // 重新自定义对象内容

                _this2.getNewFormData = {
                  anchangs: newArray,
                  startDateStr: _this2.startTime,
                  endDateStr: _this2.endTime
                };
                // console.log(this.getNewFormData);
                // 获取签约看板数据
                _this2.$request.contractStat(_this2.getNewFormData).then(function (res) {
                  // console.log("----->", res);
                  if (res.status == 200) {
                    // 自定义顶部签约看板对象
                    _this2.getSignUpData = [{
                      title: "当前签约",
                      value: res.data.data.totalCount
                    }, {
                      title: "渠道签约",
                      value: res.data.data.channelCount
                    }, {
                      title: "疑似风险",
                      value: res.data.data.maybeRiskCount
                    }, {
                      title: "确认风险",
                      value: res.data.data.sureRiskCount
                    }, {
                      title: "撤销飞单",
                      value: res.data.data.cancelRiskCount
                    }, {
                      title: "待核验",
                      value: res.data.data.uncheckCount
                    }];
                    // 疑似风险提示
                    _this2.maybeRiskMsgList = res.data.data.maybeRiskMsgList;
                    // 确认风险提示
                    _this2.sureRiskMsgList = res.data.data.sureRiskMsgList;
                    // 待核验
                    _this2.uncheckRiskMsgList = res.data.data.uncheckRiskMsgList;
                    // console.log(res.data.data.sureRiskMsgList);
                    // console.log(res.data.data);
                    // 签约看板右侧柱状图
                    _this2.channelStatList = res.data.data.channelStatList;
                    // console.log(this.channelStatList.length == 1);
                    if (_this2.channelStatList.length == 1) {
                      _this2.noTableData = false;
                    } else {
                      _this2.noTableData = true;
                    }
                    // 签约看板左侧echarts图
                    _this2.eChartDataList = res.data.data.eChartDataList;
                    // 自定义线条的颜色
                    var colors = ["rgb(91,155,213)", "rgb(0, 187, 122)", "rgb(165,165,165)", "rgb(255,193,2)", "rgb(255,0,0)"];
                    _this2.eChartDataList.forEach(function (v, index) {
                      // console.log(index, colors[index]);
                      v.itemStyle = {
                        normal: {
                          color: colors[index],
                          lineStyle: {
                            color: colors[index]
                          }
                        }
                      };
                    });
                    _this2.eChartX = res.data.data.eChartX;
                  }
                });

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }))();
    },

    // 获取默认选中日期
    dateFromTo: function dateFromTo(data) {
      // console.log(data);
      if (data) {
        this.startTime = data[0];
        this.endTime = data[1];
      }
    }
  }
});
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-8149b0a2","hasScoped":true,"transformToRequire":{"video":["src","poster"],"source":"src","img":"src","image":"xlink:href"},"buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/component/controls/signUp/signUpBoard.vue
var signUpBoard_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('controlsHeader',{attrs:{"options":_vm.controlsTreeData},on:{"getSelectAll":_vm.getSelectAll,"dateFromTo":_vm.dateFromTo},model:{value:(_vm.sel.d),callback:function ($$v) {_vm.$set(_vm.sel, "d", $$v)},expression:"sel.d"}},[_c('div',{staticClass:"controlsHeaderName",attrs:{"slot":"controlsName"},slot:"controlsName"},[_c('h1',[_vm._v("\n        风控看板"),_c('span',[_c('i',{staticClass:"el-icon-arrow-left"})]),_vm._v("签约看板\n      ")]),_vm._v(" "),_c('h2',[_vm._v("统计 / 占比")])])]),_vm._v(" "),_c('div',{staticClass:"app_controls_top"},[_c('div',{staticClass:"app_controls_topList"},[_c('ul',[_c('li',[_vm._v(_vm._s(_vm.getSignUpData[0].value))]),_vm._v(" "),_c('li',[_vm._v(_vm._s(_vm.getSignUpData[0].title))])])]),_vm._v(" "),_c('div',{staticClass:"app_controls_topList"},[_c('ul',[_c('li',[_vm._v(_vm._s(_vm.getSignUpData[1].value))]),_vm._v(" "),_c('li',[_vm._v(_vm._s(_vm.getSignUpData[1].title))])])]),_vm._v(" "),_c('div',{staticClass:"app_controls_topList"},[_c('el-tooltip',{staticClass:"item",attrs:{"effect":"dark","placement":"bottom"}},[(_vm.maybeRiskMsgList.length > 0)?_c('div',{attrs:{"slot":"content"},slot:"content"},[_c('ul',_vm._l((_vm.maybeRiskMsgList),function(item,index){return _c('li',{key:index},[_vm._v("\n              "+_vm._s(item.riskType)+" : "+_vm._s(item.count)+"\n            ")])}),0)]):_c('div',{attrs:{"slot":"content"},slot:"content"},[_vm._v("暂无数据")]),_vm._v(" "),_c('ul',{staticStyle:{"cursor":"help"}},[_c('li',[_vm._v(_vm._s(_vm.getSignUpData[2].value))]),_vm._v(" "),_c('li',[_vm._v("\n            "+_vm._s(_vm.getSignUpData[2].title)),_c('span',{staticStyle:{"margin-left":"5px","color":"#ffcc00"}},[_c('i',{staticClass:"el-icon-question"})])])])])],1),_vm._v(" "),_c('div',{staticClass:"app_controls_topList"},[_c('el-tooltip',{staticClass:"item",attrs:{"effect":"dark","placement":"bottom"}},[(_vm.sureRiskMsgList.length > 0)?_c('div',{attrs:{"slot":"content"},slot:"content"},[_c('ul',_vm._l((_vm.sureRiskMsgList),function(item,index){return _c('li',{key:index},[_vm._v("\n              "+_vm._s(item.riskType)+" : "+_vm._s(item.count)+"\n            ")])}),0)]):_c('div',{attrs:{"slot":"content"},slot:"content"},[_vm._v("暂无数据")]),_vm._v(" "),_c('ul',{staticStyle:{"cursor":"help"}},[_c('li',[_vm._v(_vm._s(_vm.getSignUpData[3].value))]),_vm._v(" "),_c('li',[_vm._v("\n            "+_vm._s(_vm.getSignUpData[3].title)),_c('span',{staticStyle:{"margin-left":"5px","color":"#ffcc00"}},[_c('i',{staticClass:"el-icon-question"})])])])])],1),_vm._v(" "),_c('div',{staticClass:"app_controls_topList"},[_c('ul',[_c('li',[_vm._v(_vm._s(_vm.getSignUpData[4].value))]),_vm._v(" "),_c('li',[_vm._v(_vm._s(_vm.getSignUpData[4].title))])])]),_vm._v(" "),_c('div',{staticClass:"app_controls_topList"},[_c('el-tooltip',{staticClass:"item",attrs:{"effect":"dark","placement":"bottom"}},[(_vm.uncheckRiskMsgList.length > 0)?_c('div',{attrs:{"slot":"content"},slot:"content"},[_c('ul',_vm._l((_vm.uncheckRiskMsgList),function(item,index){return _c('li',{key:index},[_vm._v("\n              "+_vm._s(item.riskType)+" : "+_vm._s(item.count)+"\n            ")])}),0)]):_c('div',{attrs:{"slot":"content"},slot:"content"},[_vm._v("暂无数据")]),_vm._v(" "),_c('ul',{staticStyle:{"cursor":"help"}},[_c('li',[_vm._v(_vm._s(_vm.getSignUpData[5].value))]),_vm._v(" "),_c('li',[_vm._v("\n            "+_vm._s(_vm.getSignUpData[5].title)),_c('span',{staticStyle:{"margin-left":"5px","color":"#ffcc00"}},[_c('i',{staticClass:"el-icon-question"})])])])])],1)]),_vm._v(" "),_c('div',{staticClass:"app_controls_echarts",staticStyle:{"mamrgin-bottom":"80px"}},[_c('div',{staticClass:"app_echartsDwg"},[_c('echarts',{attrs:{"myChartsId":_vm.getMyChartsId,"eChartDataList":_vm.eChartDataList,"eChartX":_vm.eChartX}})],1),_vm._v(" "),_c('div',{staticClass:"app_echartsSlide"},[_c('h1',[_vm._v("分析占比")]),_vm._v(" "),(_vm.noTableData)?_c('table',{staticClass:"numTable",attrs:{"border":"0","width":"100%","cellspacing":"0","cellpadding":"10"}},[_vm._m(0),_vm._v(" "),_vm._l((_vm.channelStatList),function(item,index){return _c('tr',{key:index},[_c('td',{staticClass:"numListTr",attrs:{"width":"35"}},[_c('span',{staticClass:"numList",class:("numColor" + (index + 1))},[_vm._v(_vm._s(index + 1))])]),_vm._v(" "),_c('td',{staticStyle:{"text-align":"left"},attrs:{"width":"80"}},[_vm._v("\n            "+_vm._s(item.channelName)+"\n          ")]),_vm._v(" "),_c('td',{attrs:{"width":"65"}},[_vm._v(_vm._s(item.channelCount))]),_vm._v(" "),_c('td',[_c('el-progress',{attrs:{"text-inside":true,"stroke-width":16,"percentage":item.percent,"color":"#FB6260"}})],1),_vm._v(" "),_c('td',[_vm._v(_vm._s(item.channelRiskCount))]),_vm._v(" "),_c('td',[_c('el-progress',{attrs:{"text-inside":true,"stroke-width":16,"percentage":item.riskPercent,"color":"#FB6260"}})],1)])})],2):_c('div',{staticClass:"showDataState"},[_vm._v("暂无签约看板 - 分析占比数据")])])])],1)}
var signUpBoard_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_c('th',{attrs:{"width":"35"}},[_vm._v("排名")]),_vm._v(" "),_c('th',{staticStyle:{"text-align":"left"},attrs:{"width":"80"}},[_vm._v("签约渠道")]),_vm._v(" "),_c('th',{attrs:{"width":"65"}},[_vm._v("签约数量")]),_vm._v(" "),_c('th',{staticStyle:{"text-align":"left"}},[_vm._v("签约占比(%)")]),_vm._v(" "),_c('th',{attrs:{"width":"65"}},[_vm._v("风险签约")]),_vm._v(" "),_c('th',{staticStyle:{"text-align":"left"}},[_vm._v("占风险比(%)")])])}]
var signUpBoard_esExports = { render: signUpBoard_render, staticRenderFns: signUpBoard_staticRenderFns }
/* harmony default export */ var signUp_signUpBoard = (signUpBoard_esExports);
// CONCATENATED MODULE: ./src/component/controls/signUp/signUpBoard.vue
function signUpBoard_injectStyle (ssrContext) {
  __webpack_require__("mJxC")
}
var signUpBoard_normalizeComponent = __webpack_require__("VU/8")
/* script */


/* template */

/* template functional */
var signUpBoard___vue_template_functional__ = false
/* styles */
var signUpBoard___vue_styles__ = signUpBoard_injectStyle
/* scopeId */
var signUpBoard___vue_scopeId__ = "data-v-8149b0a2"
/* moduleIdentifier (server only) */
var signUpBoard___vue_module_identifier__ = null
var signUpBoard_Component = signUpBoard_normalizeComponent(
  signUpBoard,
  signUp_signUpBoard,
  signUpBoard___vue_template_functional__,
  signUpBoard___vue_styles__,
  signUpBoard___vue_scopeId__,
  signUpBoard___vue_module_identifier__
)

/* harmony default export */ var controls_signUp_signUpBoard = (signUpBoard_Component.exports);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/component/controls/Report/reportBoard.vue


//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ var reportBoard = ({
  components: { controlsHeader: controls_controlsHeader_controlsHeader, echarts: controls_echarts_echarts },
  data: function data() {
    return {
      sel: {
        b: ["", []]
      },
      // 获取选择tree树结构数据
      controlsTreeData: [],
      // 组合自定义新对象
      getNewFormData: [],
      // 集合当前案场所有id
      getAnchangDataId: [],
      // 获取当前大区案场所有的id
      getFullAreaId: [],
      // 获取报备看板数据
      reportStatData: [],
      // 获取报备看板累计数据
      reportTotalCount: 0,
      // 签约看板右侧柱状图
      channelStatList: [],
      // 签约看板左侧echarts图
      eChartDataList: [],
      eChartX: [],
      noTableData: true,
      getMyChartsId: ""
    };
  },

  watch: {
    "sel.c": function selC(data) {
      var _this = this;

      // console.log("c");
      // console.log(data[1][0], data[1][1]);
      // 获取当前所有案场id
      this.getFullAreaId.forEach(function (v) {
        _this.getAnchangDataId.push(v.id);
      });
      // 将得到的数组变成固定格式的对象
      var newArray = this.getAnchangDataId.map(function (item) {
        return {
          id: item
        };
      });
      this.getNewFormData = {
        anchangs: this.sel.c[2] || newArray,
        startDateStr: data[1][0],
        endDateStr: data[1][1]
      };

      // console.log(this.getNewFormData);
      if (this.getNewFormData.anchangs.length == 0) {
        this.getControlsTreeData();
      } else {
        // 获取签约看板数据
        this.$request.reportStat(this.getNewFormData).then(function (res) {
          // console.log("+++++>", res);
          if (res.status == 200) {
            _this.reportStatData = res.data.data;
            // 签约看板右侧柱状图
            _this.channelStatList = res.data.data.channelStatList;
            // console.log(this.channelStatList.length == 1);
            if (_this.channelStatList.length == 1) {
              _this.noTableData = false;
            } else {
              _this.noTableData = true;
            }
            // 报备看板左侧echarts图
            _this.eChartDataList = res.data.data.eChartDataList;

            _this.eChartDataList.forEach(function (v) {
              // console.log(v);
              v.itemStyle = {
                normal: {
                  color: "#ff0000",
                  lineStyle: {
                    color: "#ff0000"
                  }
                }
              };
            });
            // console.log(this.eChartDataList);
            _this.eChartX = res.data.data.eChartX;
          }
        });
        // 获取报备看板累计数据
        this.$request.reportTotalCountStat(this.getNewFormData).then(function (res) {
          // console.log("*****>", res);
          if (res.status == 200) {
            _this.reportTotalCount = res.data.data.reportTotalCount;
          }
        });
      }
    }
  },
  mounted: function mounted() {
    this.getControlsTreeData();
    this.dateFromTo();
    this.getMyChartsId = "myCharts01";
  },

  methods: {
    // 控制台大区现则dom树
    getControlsTreeData: function getControlsTreeData() {
      var _this2 = this;

      return asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {
        var newArray;
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this2.$request.searchAnchang({
                  admin: JSON.parse(Object(utils["a" /* Decrypt */])(window.sessionStorage.getItem("rootAdminInfo")))
                }).then(function (res) {
                  if (res.status == 200) {
                    // 获取选择tree树结构数据
                    _this2.controlsTreeData = res.data.data.treeNodes;
                    _this2.getFullAreaId = res.data.data.flatOrgs;
                  }
                });

              case 2:
                // 获取当前所有案场id
                _this2.getFullAreaId.forEach(function (v) {
                  _this2.getAnchangDataId.push(v.id);
                });
                // 将得到的数组变成固定格式的对象
                newArray = _this2.getAnchangDataId.map(function (item) {
                  return {
                    id: item
                  };
                });
                // 重新自定义对象内容

                _this2.getNewFormData = {
                  anchangs: newArray,
                  startDateStr: _this2.startTime,
                  endDateStr: _this2.endTime
                };
                // console.log(this.getNewFormData);
                // 获取报备看板数据
                _this2.$request.reportStat(_this2.getNewFormData).then(function (res) {
                  // console.log("+++++>", res);
                  if (res.status == 200) {
                    // 签约看板右侧柱状图
                    _this2.channelStatList = res.data.data.channelStatList;
                    // console.log(res.data.data.channelStatList);
                    // console.log(this.channelStatList.length == 1);
                    if (_this2.channelStatList.length == 1) {
                      _this2.noTableData = false;
                    } else {
                      _this2.noTableData = true;
                    }
                    // 报备看板左侧echarts图
                    _this2.eChartDataList = res.data.data.eChartDataList;
                    _this2.eChartDataList.forEach(function (v) {
                      // console.log(v);
                      v.itemStyle = {
                        normal: {
                          color: "#ff0000",
                          lineStyle: {
                            color: "#ff0000"
                          }
                        }
                      };
                    });
                    _this2.eChartX = res.data.data.eChartX;
                  }
                });
                // 获取报备看板累计数据
                _this2.$request.reportTotalCountStat(_this2.getNewFormData).then(function (res) {
                  // console.log("*****>", res);
                  if (res.status == 200) {
                    _this2.reportTotalCount = res.data.data.reportTotalCount;
                  }
                });

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }))();
    },

    // 获取默认选中日期
    dateFromTo: function dateFromTo(data) {
      // console.log(data);
      if (data) {
        this.startTime = data[0];
        this.endTime = data[1];
      }
    }
  }
});
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-8de4f3cc","hasScoped":true,"transformToRequire":{"video":["src","poster"],"source":"src","img":"src","image":"xlink:href"},"buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/component/controls/Report/reportBoard.vue
var reportBoard_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('controlsHeader',{attrs:{"options":_vm.controlsTreeData},on:{"getSelectAll":_vm.getSelectAll,"dateFromTo":_vm.dateFromTo},model:{value:(_vm.sel.c),callback:function ($$v) {_vm.$set(_vm.sel, "c", $$v)},expression:"sel.c"}},[_c('div',{staticClass:"controlsHeaderName",attrs:{"slot":"controlsName"},slot:"controlsName"},[_c('h1',[_vm._v("\n        风控看板"),_c('span',[_c('i',{staticClass:"el-icon-arrow-left"})]),_vm._v("报备看板\n      ")]),_vm._v(" "),_c('h2',[_vm._v("统计 / 占比")])])]),_vm._v(" "),_c('div',{staticClass:"app_controls_top"},[_c('div',{staticClass:"app_controls_topList"},[_c('ul',[_c('li',[_vm._v(_vm._s(_vm.reportStatData.count || 0))]),_vm._v(" "),_c('li',[_vm._v("当前报备")])])]),_vm._v(" "),_c('div',{staticClass:"app_controls_topList"},[_c('ul',[_c('li',[_vm._v(_vm._s(_vm.reportTotalCount || 0))]),_vm._v(" "),_c('li',[_vm._v("累计报备")])])])]),_vm._v(" "),_c('div',{staticClass:"app_controls_echarts",staticStyle:{"mamrgin-bottom":"80px"}},[_c('div',{staticClass:"app_echartsDwg"},[_c('echarts',{attrs:{"myChartsId":_vm.getMyChartsId,"eChartDataList":_vm.eChartDataList,"eChartX":_vm.eChartX}})],1),_vm._v(" "),_c('div',{staticClass:"app_echartsSlide"},[_c('h1',[_vm._v("分析占比")]),_vm._v(" "),(_vm.noTableData)?_c('table',{staticClass:"numTable",attrs:{"border":"0","width":"100%","cellspacing":"0","cellpadding":"10"}},[_vm._m(0),_vm._v(" "),_vm._l((_vm.channelStatList),function(item,index){return _c('tr',{key:index},[_c('td',{staticClass:"numListTr",attrs:{"width":"35"}},[_c('span',{staticClass:"numList",class:("numColor" + (index + 1))},[_vm._v(_vm._s(index + 1))])]),_vm._v(" "),_c('td',{staticStyle:{"text-align":"left"},attrs:{"width":"200"}},[_vm._v(_vm._s(item.channelName))]),_vm._v(" "),_c('td',{attrs:{"width":"140"}},[_vm._v(_vm._s(item.channelCount))]),_vm._v(" "),_c('td',[_c('el-progress',{attrs:{"text-inside":true,"stroke-width":16,"percentage":item.percent,"color":"#FB6260"}})],1)])})],2):_c('div',{staticClass:"showDataState"},[_vm._v("\n        暂无报备看板 - 分析占比数据\n      ")])])])],1)}
var reportBoard_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_c('th',{attrs:{"width":"35"}},[_vm._v("排名")]),_vm._v(" "),_c('th',{staticStyle:{"text-align":"left"}},[_vm._v("渠道")]),_vm._v(" "),_c('th',[_vm._v("报备数量")]),_vm._v(" "),_c('th',{staticStyle:{"text-align":"left"}},[_vm._v("占比(%)")])])}]
var reportBoard_esExports = { render: reportBoard_render, staticRenderFns: reportBoard_staticRenderFns }
/* harmony default export */ var Report_reportBoard = (reportBoard_esExports);
// CONCATENATED MODULE: ./src/component/controls/Report/reportBoard.vue
function reportBoard_injectStyle (ssrContext) {
  __webpack_require__("8GZk")
}
var reportBoard_normalizeComponent = __webpack_require__("VU/8")
/* script */


/* template */

/* template functional */
var reportBoard___vue_template_functional__ = false
/* styles */
var reportBoard___vue_styles__ = reportBoard_injectStyle
/* scopeId */
var reportBoard___vue_scopeId__ = "data-v-8de4f3cc"
/* moduleIdentifier (server only) */
var reportBoard___vue_module_identifier__ = null
var reportBoard_Component = reportBoard_normalizeComponent(
  reportBoard,
  Report_reportBoard,
  reportBoard___vue_template_functional__,
  reportBoard___vue_styles__,
  reportBoard___vue_scopeId__,
  reportBoard___vue_module_identifier__
)

/* harmony default export */ var controls_Report_reportBoard = (reportBoard_Component.exports);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/components/homePage.vue
//
//
//
//
//
//
//
//





/* harmony default export */ var homePage = ({
  components: { controlsVideo: controls_video_controlsVideo, viewBoard: controls_viewBoard_viewBoard, signUpBoard: controls_signUp_signUpBoard, reportBoard: controls_Report_reportBoard },
  data: function data() {
    return {};
  }
});
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-060c08ce","hasScoped":true,"transformToRequire":{"video":["src","poster"],"source":"src","img":"src","image":"xlink:href"},"buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/homePage.vue
var homePage_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"app_main_bg"},[_c('controlsVideo'),_vm._v(" "),_c('viewBoard'),_vm._v(" "),_c('reportBoard'),_vm._v(" "),_c('signUpBoard')],1)}
var homePage_staticRenderFns = []
var homePage_esExports = { render: homePage_render, staticRenderFns: homePage_staticRenderFns }
/* harmony default export */ var components_homePage = (homePage_esExports);
// CONCATENATED MODULE: ./src/components/homePage.vue
function homePage_injectStyle (ssrContext) {
  __webpack_require__("YzI4")
}
var homePage_normalizeComponent = __webpack_require__("VU/8")
/* script */


/* template */

/* template functional */
var homePage___vue_template_functional__ = false
/* styles */
var homePage___vue_styles__ = homePage_injectStyle
/* scopeId */
var homePage___vue_scopeId__ = "data-v-060c08ce"
/* moduleIdentifier (server only) */
var homePage___vue_module_identifier__ = null
var homePage_Component = homePage_normalizeComponent(
  homePage,
  components_homePage,
  homePage___vue_template_functional__,
  homePage___vue_styles__,
  homePage___vue_scopeId__,
  homePage___vue_module_identifier__
)

/* harmony default export */ var src_components_homePage = __webpack_exports__["default"] = (homePage_Component.exports);


/***/ }),

/***/ "qyJz":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__("+ZMJ");
var $export = __webpack_require__("kM2E");
var toObject = __webpack_require__("sB3e");
var call = __webpack_require__("msXi");
var isArrayIter = __webpack_require__("Mhyx");
var toLength = __webpack_require__("QRG4");
var createProperty = __webpack_require__("fBQ2");
var getIterFn = __webpack_require__("3fs2");

$export($export.S + $export.F * !__webpack_require__("dY0y")(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),

/***/ "yJZL":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })

});