webpackJsonp([6],{

/***/ "KbQ5":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "j+CF":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ./node_modules/babel-runtime/core-js/json/stringify.js
var stringify = __webpack_require__("mvHQ");
var stringify_default = /*#__PURE__*/__webpack_require__.n(stringify);

// EXTERNAL MODULE: ./src/lib/utils.js
var utils = __webpack_require__("n95b");

// EXTERNAL MODULE: ./node_modules/flv.js/src/flv.js + 38 modules
var flv = __webpack_require__("9vWd");

// EXTERNAL MODULE: ./src/lib/imgExif.js
var imgExif = __webpack_require__("uGxA");

// EXTERNAL MODULE: ./src/component/fengkong/compareImage.vue + 2 modules
var compareImage = __webpack_require__("TQNy");

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/components/windControl.vue

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

// import axios from "axios";





/* harmony default export */ var windControl = ({
  name: "dataDictionary",
  components: { compareImage: compareImage["a" /* default */] },
  data: function data() {
    return {
      fullscreenLoading: false, //全局loading
      isBtnFeidanShow: false,
      dialogImg: false, //canvas弹窗
      canvsLoading: false,
      riskPath: "",
      imagePath: "", //图片前缀
      level: "", //权限管理
      role: "", //角色管理
      anchangIds: "", //当前用户的anchangId
      anchangName: "", //选择的案场
      anchangList: [],
      loading: false, //表格加载动画
      loadingEq: false, //树形加载动画
      tableData: [], //底部表格数据
      haveData: "暂无数据", //无数据时显示的文字
      defaultProps: {
        label: "name"
      },
      activeId: "", //选中的城市
      activeCor: "", //选中的集团
      dialogVisible: false, //打开对应增加表单的弹窗
      checkListConfirmImg: [], //用户在确认图片弹窗中选择的图片列表
      isShowImgsList: [], //将用户在确认图片弹窗中选择的图片列表存入此列表中
      data2: [], //树形菜单数据
      ruleForm: {
        name: "",
        activeId: "", //存二级树id列表
        imageUrl: ""
      },
      rules: {
        //新增表单验证规则
        name: [{ required: true, message: "请输入案场名称", trigger: "blur" }, {
          min: 1,
          max: 20,
          message: "案场名称长度在 1 到 20 个字符",
          trigger: "blur"
        }]
      },
      currentPage: 1, //分页组件
      pageTotal: 5, //每页几条
      param: {}, //表单要提交的参数
      total: 0, //总条数
      serch: "", //搜索的内容
      pageType: "tableList", //分页状态默认为表格
      multipleSelection: {}, //表格中被批量选中的行的信息存放
      radio: "1", //签约核验与拍照核验的是否选中
      checkList: [], // 拍照核验时选择案场的checklist
      radioChoose: 0,
      checkListIsShow: [],
      isShowTable: false, //是否显示下面的表格
      isShowSearch: false, //是否显示搜索栏
      isShowTip: false, //搜索提示语
      changName: "", //选中的案场名称
      imageUrl: "", //图片的路径
      imageUrl1: "", //图片的路径
      btnLodiing: false,
      dialogCutImg: false, //图片剪裁
      // 裁剪组件的基础配置option
      previews: {
        width: 0,
        height: 0
      },
      allImgList: [], //所有人脸图片
      tableDataList: [], //所有表格数据
      dialogVideo: false, //录像弹窗
      PvideoLoading: false, //录像loading
      videoSrc: "", //录像地址
      cmdId: "", //录像的命令id
      viedoACid: "", //录像的案场id
      videoImageName: "", //查看录像的图片名
      viedoCreateTime: "",
      beforeSeconds: 10,
      afterSeconds: 10,
      photoDate: "", //拍照核验的日期
      photoTime: "", //拍照核验时间
      sexOptions: [{
        value: "0",
        label: "男"
      }, {
        value: "1",
        label: "女"
      }],
      sexChoose: "", //筛选的性别
      ageOptions: [{
        value: "5",
        label: ">56岁"
      }, {
        value: "4",
        label: "46-55岁"
      }, {
        value: "3",
        label: "31-45岁"
      }, {
        value: "2",
        label: "19-30岁"
      }, {
        value: "1",
        label: "<18岁"
      }],
      ageChoose: "", //筛选的年龄
      searchTotal: 0, //总条数
      searchCurrentPage: 1, //当前页数
      searchPageSize: 10, //一页显示多少条数据
      orderBy: "", //按什么排序
      direction: "", //按什么顺序，desc倒序
      videoTime: "", //视频核验的时间
      videoDate: "", //视频核验的日期
      videoLocal: "", //视频核验的位置
      equiplists: [], //该案场所有摄像头名字
      vSrc: "", //视频播放地址
      videoLoading: false, //文字版loading
      howSort: true, //表格如何排序，559案场为'custom'，其余为true
      flvPlayer: null,
      cityAnchang: {}, //保存城市和案场的映射
      cityName: "", //点击跳转风控时的城市name
      cityId: "", //点击跳转风控时的城市id--接口用
      cityfId: "", //点击跳转风控时的城市id--菜单用
      anchangId: "", //点击跳转风控时的案场id
      fileList: [],
      imgDownloadNum: 0,
      interval: "",
      countSend: 0, //控制每个案场只发送一次网络状态
      showPhoto: true, //是否显示拍照核验
      environment: 1, //当前内外网环境，默认外网
      version: 3, //当前版本，默认3截图版
      showTips: false, //截图版文字提示
      showPreview: false, //拍照核验的视频预览栏是否显示，内网显示，外网不显示
      innerVideo: false //预览弹窗
    };
  },
  mounted: function mounted() {
    String.prototype.myReplace = function (f, e) {
      var reg = new RegExp(f, "g"); //创建正则RegExp对象
      return this.replace(reg, e);
    };
    //初始化视频核验的时间日期
    var date = new Date();
    this.videoDate = date.toLocaleDateString().myReplace("/", "-");

    this.videoTime = [new Date(new Date().getTime() - 480000), new Date(new Date().getTime() - 180000)];
  },
  created: function created() {
    var _this2 = this;

    //获取图片前缀
    var rootAdminInfo = JSON.parse(Object(utils["a" /* Decrypt */])(window.sessionStorage.getItem("rootAdminInfo")));

    var param = JSON.parse(window.localStorage.getItem("param"));
    this.imagePath = param.imagePathPrefix;
    this.riskPath = param.riskImagePathPrefix;
    //请求集团的数据
    this.level = rootAdminInfo.level;
    this.role = rootAdminInfo.role;
    var corId = rootAdminInfo.corId;
    var anchangIds = rootAdminInfo.anchangId;
    this.anchangIds = anchangIds;
    var cityName = rootAdminInfo.cityName;

    this.$request.searchAnchang({ admin: rootAdminInfo, allowEmptyChild: false }).then(function (res) {
      if (res.status == 200 && res.data.code == 1000) {
        //给每条数据添加value属性
        var _val = function _val(arr) {
          arr.forEach(function (item, index) {
            item.value = item.id;
            if (item.children) {
              if (item.children.length != 0) {
                _val(item.children);
              } else {
                delete item.children;
              }
            }
          });
        };

        _this2.loadingEq = false;
        var data = res.data.data.treeNodes;
        if (data.length == 0) {
          _this2.$message({
            type: "warning",
            message: "当前账号没有可管理案场！",
            duration: 1000
          });
          return;
        }
        //默认选第一个城市
        _this2.anchangList = data[0].children[0].children[0].children;
        // if(data[0].children[0].children[0].marginVersion == 1 || data[0].children[0].children[0].marginVersion == 2){
        //   this.showPhoto = true
        // }else{
        //   this.showPhoto = false
        // }

        //删除最后一级 案场
        data.forEach(function (cor) {
          cor.fid = "a" + cor.id;
          if (cor.children) {
            cor.children.forEach(function (area) {
              area.fid = "b" + area.id;
              if (area.children) {
                area.children.forEach(function (city) {
                  city.fid = "c" + city.id;
                  if (city.children) {
                    _this2.cityAnchang[city.id] = city.children;
                    city.children = null;
                  }
                });
              }
            });
          }
        });
        _val(data);
        _this2.data2 = data;

        //默认第一个城市选中
        var activeId3 = data[0].children[0].children[0].id; //接口用城市id
        var activeId3f = data[0].children[0].children[0].fid; //菜单用城市fid
        _this2.cityId = activeId3;
        _this2.cityfId = activeId3f;
        _this2.activeCor = data[0].id; //集团id
        _this2.activeId = data[0].children[0].children[0].name; //城市
        _this2.cityName = _this2.activeId;
        var chooseId = _this2.common.getQueryVariable("cityId") ? _this2.common.getQueryVariable("cityId") : activeId3; //接口用
        var choosefId = _this2.common.getQueryVariable("cityfId") ? _this2.common.getQueryVariable("cityfId") : activeId3f; //菜单用
        var _this = _this2;
        _this.$nextTick(function () {
          _this.$refs.tree2.setCurrentKey(choosefId);
        });
        _this2.anchangList = _this2.cityAnchang[chooseId];

        // 从fengkong页面回跳回来
        if (_this2.common.getQueryVariable("anchangId")) {
          _this2.radio = "2";
          _this2.checkList = [];
          _this2.checkList.push(Number(_this2.common.getQueryVariable("anchangId")));
          // this.dialogImg = true;

          // 将图片重新渲染在canvas上
          // setTimeout(() => {
          //   const img = new Image();
          //   const canvas = document.querySelector("#myCanvas");
          //   let ctx;
          //   ctx = canvas.getContext("2d");
          //   // img.setAttribute("crossOrigin",'Anonymous')
          //   // img.crossOrigin = "Anonymous";
          //   img.src = window.sessionStorage.getItem("snapImg");
          //   img.onload = function() {
          //     // 画布大小和图片尺寸不一样算好比例
          //     const cWidth = canvas.width,
          //       cHeight = canvas.height;
          //     const imgWidth = img.naturalWidth,
          //       imgHeight = img.naturalHeight;
          //     const zoom = {
          //       width: cWidth / imgWidth,
          //       height: cHeight / imgHeight
          //     };
          //     ctx.drawImage(img, 0, 0, cWidth, cHeight);
          //     const startPoint = [20, 30],
          //       endPoint = [60, 45];
          //     const startPoint2 = [20, 50],
          //       endPoint2 = [60, 65];
          //     ctx.strokeStyle = "red";
          //   };
          // }, 100);

          // console.log(this.param)
          // this.$request.photoCanvas(this.param).then((res) => {
          //   console.log(res)
          // })
        } else {
          _this2.radio = "1";
        }
      } else {
        _this2.$message({
          type: "error",
          message: "加载失败，请稍后再试",
          duration: 1000
        });
      }
    }).catch(function (err) {
      console.log(err);
      _this2.$message({
        type: "error",
        message: "请求超时，请稍后重试!",
        duration: 1000
      });
    });
  },

  methods: {
    /*************   绘制canvas   *************** */
    canvsLode: function canvsLode() {
      var _this3 = this;

      var loading = this.$loading({
        lock: true,
        text: "正在识别...",
        spinner: "el-icon-loading",
        background: "rgba(0, 0, 0, 0.7)"
      });
      console.log(this.param);
      console.log(this.param.get("imageFile"));
      this.$request.photoCanvas(this.param).then(function (res) {
        if (res.data.code == 1000) {
          if (res.data.data.images.length == 0) {
            _this3.$message.warning("未识别出人脸，请换张照片试试~");
            loading.close();
            return false;
          }
          _this3.dialogImg = true;
          _this3.canvsLoading = false;
          loading.close();
          _this3.checkListConfirmImg = [];
          _this3.allImgList = res.data.data.images;

          var rect = res.data.data.rect;
          _this3.rect = res.data.data.rect;
          console.log(rect);
          setTimeout(function () {
            var img = new Image();
            var canvas = document.querySelector("#myCanvas");
            var ctx = void 0;
            ctx = canvas.getContext("2d");
            // 当图片加载完再动手
            img.onload = function () {
              // 画布大小和图片尺寸不一样算好比例
              var cWidth = canvas.width,
                  cHeight = canvas.height;
              var imgWidth = img.naturalWidth,
                  imgHeight = img.naturalHeight;
              var zoom = {
                width: cWidth / imgWidth,
                height: cHeight / imgHeight
              };

              // 以图画底
              ctx.drawImage(img, 0, 0, cWidth, cHeight);
              // 假设左上角的point 29,24 这是针对原图的坐标系
              // 假设右下角的point 124,52 这是针对原图的坐标系

              var startPoint = [20, 30],
                  endPoint = [60, 45];
              var startPoint2 = [20, 50],
                  endPoint2 = [60, 65];
              // https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/strokeRect
              ctx.strokeStyle = "red";
              rect.forEach(function (item) {
                ctx.strokeRect(item.x * zoom.width, item.y * zoom.height, item.w * zoom.width, item.h * zoom.height);
              });
            };

            // 动手
            img.src = _this3.imageUrl;
          }, 10);
        } else {
          loading.close();
          _this3.$message.error(res.data.msg);
        }
      }).catch(function (err) {
        console.log(err);
        loading.close();
        _this3.$message.error("请求超时，请稍后重试!");
      });
    },

    // 将选择的案场名字保存起来
    selName: function selName(anchangName) {
      this.changName = anchangName;
    },
    showtwo: function showtwo() {
      console.log("拍照核验");
    },
    showthree: function showthree() {
      console.log("视频核验");
      if (this.anchangList.length > 0) {
        this.chooseAnchang4(this.anchangList[0].id);
      }
    },


    // /*********** 修改图片 *********** */

    imageChange: function imageChange(file, fileList, name) {
      var _this4 = this;

      var isJPG = file.raw.type === "image/jpeg";
      var isPNG = file.raw.type === "image/png";
      var isLt5M = file.size / 1024 / 1024 < 5;
      if (!this.checkList.length) {
        this.$message.error("请先选择案场!");
        return false;
      }
      console.log("file=", file);
      if (!(isJPG || isPNG)) {
        this.$message({
          type: "warning",
          message: "请选择格式为jpeg或png格式的文件",
          duration: 1000
        });
        return false;
      }
      var loading = this.$loading({
        lock: true,
        text: "正在识别...",
        spinner: "el-icon-loading",
        background: "rgba(0, 0, 0, 0.7)"
      });
      var windowURL = window.URL || window.webkitURL;
      var img = new Image();
      var width;
      var height;
      img.onload = function () {
        width = this.width; //获取到width放在了file属性上
        height = this.height; //获取到height放在了file属性上
      };
      console.log(".....................");
      console.log(file.raw);
      img.src = window.URL.createObjectURL(file.raw);
      this.previews.width = width;
      this.previews.height = height;

      Object(imgExif["a" /* getImgMsg */])(file.raw).then(function (res) {
        console.log("-------->", res);
        console.log("++++++++>", file.name);
        var newfile = _this4.common.dataURLtoFile(res, file.name);
        _this4.param = new FormData();
        _this4.param.append("imageFile", newfile);
        _this4.param.append("anchangId", _this4.checkList[0]);
        _this4.imageUrl = res;

        if (_this4.imageUrl != "") {
          _this4.ruleForm.imageUrl = _this4.imageUrl;
          _this4.$refs["imageUrl"].clearValidate();
          loading.close();
          _this4.canvsLode();
        }
      });
    },

    /******************确认图片中选择图片的操作***************************/
    selImage: function selImage(value) {
      var indexImg = this.checkListConfirmImg.indexOf(value);
      if (indexImg == -1) {
        this.checkListConfirmImg.push(value);
      } else {
        this.checkListConfirmImg.splice(indexImg, 1);
      }
    },

    // 在页面上点击不同图片出现不同表格调用的方法
    selImage2: function selImage2(value) {
      this.checkListIsShow = [];
      this.checkListIsShow[0] = value;
      // 查找用户点击的图片对应的下标的isShowImgsList中的图片信息，以供转接对应的表格的操作
      this.tableShow(this.isShowImgsList[value]);
    },


    //重置
    reset: function reset() {
      this.photoDate = "";
      this.photoTime = "";
      this.sexChoose = "";
      this.ageChoose = "";
      this.searchTotal = 0;
      this.searchCurrentPage = 1;
      this.searchPageSize = 10;
    },


    //内网视频放大
    watchVideo: function watchVideo(event) {
      this.innerVideo = true;
      var el = event.currentTarget;
      setTimeout(function () {
        document.getElementById("viewVideo").setAttribute("src", el.src);
      }, 0);
    },
    handleClose1: function handleClose1() {
      this.innerVideo = false;
    },


    // 提交上传按钮后的操作
    handleClose: function handleClose() {
      var _this5 = this;

      if (this.checkList.length == 0) {
        this.$message({
          type: "error",
          message: "请选择案场",
          duration: 1000
        });
        return false;
      }
      if (this.imageUrl == "") {
        this.$message({
          type: "error",
          message: "请选择照片",
          duration: 1000
        });
        return false;
      }
      if (!this.checkListConfirmImg.length) {
        this.$message({
          type: "error",
          message: "请选择需要识别的人脸照片",
          duration: 1000
        });
        return false;
      }
      this.ruleForm.activeId = this.activeId;

      this.isShowImgsList = this.checkListConfirmImg.map(function (item) {
        return _this5.allImgList[item];
      });
      console.log("isShowImgsList=", this.isShowImgsList);

      this.isShowTable = false;
      this.isShowSearch = true;
      this.isShowTip = true;
      this.showTips = false;
      this.dialogImg = false;
      this.imageUrl1 = this.imageUrl;
      this.reset();
      this.howSort = "custom";
    },


    // 拍照核验搜索
    doSearch: function doSearch() {
      var _this6 = this;

      var startTime = "";
      var endTime = "";
      if ((this.photoDate == "" || this.photoDate == null) && (this.photoTime == "" || this.photoTime == null)) {
        startTime = "";
        endTime = "";
      } else if (this.photoDate == "" || this.photoDate == null || this.photoTime == "" || this.photoTime == null) {
        this.$message({
          type: "warning",
          message: "请补全日期或时间",
          duration: 2000
        });
        return false;
      } else {
        startTime = this.photoDate + " " + this.common.getTime(this.photoTime[0]).split(" ")[1];
        endTime = this.photoDate + " " + this.common.getTime(this.photoTime[1]).split(" ")[1];
      }

      if (this.direction == "ascending") this.direction = "asc";
      if (this.direction == "descending") this.direction = "desc";

      var data = {
        anchangId: this.checkList[0],
        images: this.isShowImgsList,
        beginTimeStr: startTime, //'2020-09-10 16:24:12'
        endTimeStr: endTime, //'2020-09-10 16:24:12'
        gender: this.sexChoose, //1女0男
        age: this.ageChoose, //1-5分别是<18岁->56岁
        orderBy: this.orderBy, //'createTime|similarity'
        direction: this.direction || "desc", //'desc|asc'
        currentPage: this.searchCurrentPage,
        pageSize: this.searchPageSize
      };

      this.btnLodiing = true;
      var loading = this.$loading({
        lock: true,
        text: "正在查询...",
        spinner: "el-icon-loading",
        background: "rgba(0, 0, 0, 0.7)"
      });

      this.$request.photoVerification(data).then(function (res) {
        if (res.data.code == "1000") {
          //操作成功
          _this6.imageUrl1 = _this6.imageUrl;
          _this6.isBtnFeidanShow = true;
          var list = res.data.data;

          _this6.tableDataList = list;
          if (list.version == 3) {
            //截图版显示提示
            _this6.showTips = true;
          }
          _this6.checkListIsShow = [0];

          _this6.tableShow(_this6.isShowImgsList[0]);

          _this6.isShowTable = true;
          _this6.isShowTip = false;
        } else {
          _this6.$message({
            type: "error",
            message: res.data.msg,
            duration: 2000
          });
          _this6.dialogVisible = false;
          _this6.ruleForm.name = "";
        }
        _this6.btnLodiing = false;
        loading.close();
      }).catch(function () {
        loading.close();
        _this6.$message({
          type: "error",
          message: "请求超时，请稍后重试!",
          duration: 2000
        });
        _this6.btnLodiing = false;
      });
    },


    //拍照核验表格展示
    tableShow: function tableShow(val) {
      var _this7 = this;

      this.searchTotal = this.tableDataList[val].totalCount;
      if (this.searchTotal !== 0) {
        this.tableDataList[val].currPageList.forEach(function (item, indx) {
          item.index = indx + 1;
          item.createTime = item.createTime;
        });
        this.tableData = this.tableDataList[val].currPageList;
        this.tableData.forEach(function (item) {
          item.anchangName = _this7.anchangName;
          //内网加载视频预览
          if (_this7.environment == 0) {
            var timestamp = new Date(item.createTime).getTime();
            var date = _this7.common.getTime(timestamp).split(" ")[0].replace("-", "").replace("-", "");
            var start = _this7.common.getTime(timestamp - 10000).split(" ")[1].replace(":", "").replace(":", "");
            var end = _this7.common.getTime(timestamp + 10000).split(" ")[1].replace(":", "").replace(":", "");
            var data = {
              anchangId: _this7.anchangId,
              beginTime: date + "t" + start + "z",
              endTime: date + "t" + end + "z",
              camId: item.camId
            };
            _this7.$request.getMp4(data).then(function (res) {
              console.log(res.data);
              if (res.data.code == 1000) {
                var func = function func() {
                  //定时任务
                  count++;
                  console.log(count);
                  axios.get(checkUrl + "?temp=" + Math.random()).then(function (response) {
                    if (response.data == "OK") {
                      document.getElementById("text" + item.id).style.display = "none";
                      document.getElementById("table" + item.id).setAttribute("src", playUrl);
                      clearInterval(interval); //停止
                    }
                    if (response.data == "ER") {
                      document.getElementById("text" + item.id).style.display = "";
                      clearInterval(interval); //停止
                    }
                    if (count == 20) {
                      document.getElementById("text" + item.id).style.display = "";
                      clearInterval(interval); //停止
                    }
                  }).catch(function (error) {
                    document.getElementById("text" + item.id).style.display = "";
                    clearInterval(interval); //停止
                  });
                };

                var count = 0;
                var checkUrl = res.data.data.checkUrl;
                var playUrl = res.data.data.playUrl;
                var _this = _this7;

                var interval = setInterval(func, 6000); //轮询
              } else {
                console.error(res.data.msg);
                document.getElementById("text" + item.id).style.display = "";
              }
            }).catch(function (err) {
              document.getElementById("text" + item.id).style.display = "";
              console.error(err);
            });
          }
        });
        console.log("anchangName=", this.anchangName);
      } else {
        this.tableData = [];
      }
    },


    //表格排序
    sortChange: function sortChange(obj) {
      this.orderBy = obj.prop;
      this.direction = obj.order;
      this.doSearch();
    },


    //每页的查询
    handleSizeChange: function handleSizeChange(val) {
      console.log("\u6BCF\u9875 " + val + " \u6761");
      this.searchPageSize = parseInt("" + val);
      this.doSearch();
    },

    //调转的每页查询
    directHandleCurrentChange: function directHandleCurrentChange(val) {
      this.searchCurrentPage = parseInt("" + val);
      this.doSearch();
    },


    //表格多选
    handleSelectionChange: function handleSelectionChange(val) {
      if (val.length > 1 && val.length < this.tableData.length) {
        this.$refs.multipleTable.clearSelection();
        this.$refs.multipleTable.toggleRowSelection(val[val.length - 1]);
        this.multipleSelection = val[val.length - 1];
      } else if (val.length == this.tableData.length) {
        this.$refs.multipleTable.clearSelection();
        this.multipleSelection = {};
      } else {
        this.multipleSelection = val[0];
      }
    },


    //向后台发送网络状态
    sendServer: function sendServer(net) {
      this.countSend++;
      if (this.countSend == 1) {
        this.$request.setNetworkEnv({
          anchangId: this.anchangId,
          intranet: net
        }).then(function (response) {
          console.log(response);
        });
      }
    },


    //点击图片将案场id传入然后
    handleClick: function handleClick(item) {
      var _this8 = this;

      window.sessionStorage.setItem("environment", "");
      window.sessionStorage.setItem("fieldId", stringify_default()(item.id));
      window.sessionStorage.setItem("fieldName", stringify_default()(item.name));
      window.sessionStorage.setItem("corId", stringify_default()(this.activeCor));
      this.anchangId = item.id;

      //获取该案场配置方式
      this.$request.getServiceConfigs({
        anchangId: this.anchangId
      }).then(function (response) {
        var res = response.data;
        console.log(res);
        if (res.code == "1000") {
          window.sessionStorage.setItem("version", res.data.marginVersion || 3); //1-人脸，其余非人脸，默认截图版
          //判断内外网
          _this8.countSend = 0;
          var that = _this8;
          if (res.data.marginIp) {
            var ip = res.data.marginIp.split("//")[1].split(":")[0];
            //开始计时
            var startTime = new Date().getTime();
            axios.get("https://" + ip + "/ping").then(function (response) {
              if (response.status == "200") {
                window.sessionStorage.setItem("environment", "0"); //局域网内
                that.sendServer("true");
              } else {
                window.sessionStorage.setItem("environment", "1"); //外网
                that.sendServer("false");
              }
            }).catch(function (error) {
              if (error.response) {
                console.log(error.response.data);
                console.log(error.response.status);
                console.log(error.response.headers);
              } else if (error.request) {
                console.log("error.request:", error.request);
              } else {
                console.log("error.message:", error.message);
              }
              console.log("error.config:", error.config);

              var endTime = new Date().getTime();
              console.log(endTime - startTime);
              var catchTime = endTime - startTime;
              if (catchTime < 3000) {
                window.sessionStorage.setItem("environment", "0"); //外网
                that.sendServer("true");
                that.$alert("内网版可以看到每条记录的动态视频，如想使用请点击确定进入新页面授权，选择“高级”->“继续前往”", "监测到内网环境", {
                  confirmButtonText: "确定",
                  callback: function callback(action) {
                    window.open("https://" + ip + "/localauth/", "_blank");
                  }
                });
              } else {
                window.sessionStorage.setItem("environment", "1"); //外网
                that.sendServer("false");
              }
            });
            //5秒未应答认为是外网
            setTimeout(function () {
              if (!window.sessionStorage.getItem("environment")) {
                window.sessionStorage.setItem("environment", "1");
                that.sendServer("false");
              }
            }, 5000);
          } else {
            window.sessionStorage.setItem("environment", "1"); //外网
            that.sendServer("false");
          }
        }
      });

      //签约核验
      // window.open("./static/fengkong.html", "_blank");
      console.log(this.cityId, this.cityName);
      this.$router.push({
        name: "fengkong",
        params: {
          cityId: this.cityId,
          cityfId: this.cityfId,
          cityName: this.cityName,
          anchangId: this.anchangId
        }
      });
    },


    //拍照核验选择案场
    chooseAnchang: function chooseAnchang(id, name) {
      var _this9 = this;

      this.anchangId = id;
      //获取该案场配置方式
      this.$request.getServiceConfigs({
        anchangId: id
      }).then(function (response) {
        var res = response.data;
        console.log(res);
        if (res.code == "1000") {
          _this9.version = res.data.marginVersion || 3; //1-人脸，其余非人脸，默认截图版
        }
      });
      this.showPreview = false;
      this.environment = 1;
      //判断内外网
      this.countSend = 0;
      var flag = "";
      this.$request.getServiceConfigs({
        anchangId: id
      }).then(function (response) {
        var res = response.data;
        console.log(res);
        if (res.code == "1000") {
          var that = _this9;
          if (res.data.marginIp) {
            var ip = res.data.marginIp.split("//")[1].split(":")[0];
            axios.get("https://" + ip + "/ping").then(function (response) {
              if (response.status == "200") {
                flag = 1; //局域网内
                that.sendServer("true");
                that.showPreview = true;
                _this9.environment = 0;
              } else {
                that.sendServer("false");
              }
            }).catch(function (error) {
              that.sendServer("false");
            });
            //5秒未应答认为是外网
            setTimeout(function () {
              if (flag == "") {
                that.sendServer("false");
              }
            }, 5000);
          } else {
            that.sendServer("false");
          }
        }
      });
      var index = this.checkList.indexOf(id);
      console.log("checkList=", this.checkList);
      if (index == -1) {
        this.checkList.push(id);
        this.anchangName = name;
        console.log("anchangName=", this.anchangName);
      } else {
        this.checkList.splice(index, 1);
        this.anchangName = "";
      }
    },


    //视频核验选择案场
    chooseAnchang4: function chooseAnchang4(id) {
      var _this10 = this;

      this.radioChoose = id;
      //取该案场设备列表
      this.$request.getCameraByAnchang({
        anchangId: id,
        currentPage: 1,
        pageSize: 20
      }).then(function (res) {
        if (res.data.code == 1000) {
          var list = res.data.data.list;
          for (var i = 0; i < list.length; i++) {
            list[i].shadow = "hover";
          }
          _this10.equiplists = list;
        } else {
          _this10.$message({
            type: "error",
            message: res.data.msg,
            duration: 1000
          });
        }
      });
    },


    //点击树节点
    clickNode: function clickNode(a, b, c) {
      this.empty();
      this.checkList = [];
      this.pageType = "tableList";
      this.currentPage = 1;

      if (!a.children && a.fid.indexOf("c") >= 0) {
        this.activeId = a.name; //城市
        this.activeCor = b.parent.parent.data.id;
        this.anchangList = this.cityAnchang[a.id];
        this.cityId = a.id;
        this.cityfId = a.fid;
        this.cityName = a.name;
        // if(a.marginVersion == 1 || a.marginVersion == 2){
        //   this.showPhoto = true
        // }else{
        //   this.showPhoto = false
        // }
        // this.getEquipmentList();
      } else {
        this.anchangList = [];
        this.radio = "1";
      }
    },


    //查看录像
    openVideo: function openVideo(index, row) {
      this.dialogVideo = true;
      this.PvideoLoading = true;
      this.videoImageName = row.realImageName;
      this.viedoACid = row.anchangId;
      this.viedoCreateTime = new Date(row.createTime).getTime();
      this.getVideo();
    },
    getVideo: function getVideo() {
      var _this11 = this;

      this.$request.getVideo({
        anchangId: this.viedoACid,
        imageName: this.videoImageName,
        createTime: this.viedoCreateTime,
        beforeSeconds: this.beforeSeconds,
        afterSeconds: this.afterSeconds
      }).then(function (res) {
        if (res.data.code == 1000) {
          _this11.videoSrc = res.data.data.playUrl;
          _this11.cmdId = res.data.data.cmdId;
          var count = 0;
          var flag = 0;

          var _this = _this11;
          if (_this11.cmdId == -1) {
            _this.$nextTick(function () {
              var videoElement = document.getElementById("videoElement");
              _this.flvPlayer = flv["a" /* default */].createPlayer({
                type: "flv",
                url: _this.videoSrc,
                hasAudio: false,
                config: {
                  enableWorker: true,
                  enableStashBuffer: false,
                  stashInitialSize: 128
                }
              });
              _this.flvPlayer.attachMediaElement(videoElement);
              _this.flvPlayer.load();
              _this.flvPlayer.play();
              _this.PvideoLoading = false;
            });
          } else {
            var func = function func() {
              //定时任务
              count++;
              console.log(count);
              _this.$request.checkVideo({
                cmdId: _this.cmdId
              }).then(function (response) {
                if (response.data.data.code == "3") {
                  _this.$nextTick(function () {
                    var videoElement = document.getElementById("videoElement");
                    _this.flvPlayer = flv["a" /* default */].createPlayer({
                      type: "flv",
                      url: _this.videoSrc,
                      hasAudio: false,
                      config: {
                        enableWorker: true,
                        enableStashBuffer: false,
                        stashInitialSize: 128
                      }
                    });
                    _this.flvPlayer.attachMediaElement(videoElement);
                    _this.flvPlayer.load();
                    _this.flvPlayer.play();
                    _this.PvideoLoading = false;
                    flag = 1;
                  });
                  clearInterval(_this.interval); //停止
                }
                if (count == 20 && flag == 0) {
                  _this.$message({
                    type: "error",
                    message: "获取视频失败",
                    duration: 1000
                  });
                  clearInterval(_this.interval); //停止
                }
              }).catch(function (error) {
                _this.$message({
                  type: "error",
                  message: "获取视频失败",
                  duration: 1000
                });
                console.log("error=", error);
                clearInterval(_this.interval); //停止
              });
            };

            _this.interval = setInterval(func, 6000); //轮询
          }
        }
      });
    },

    //快进20s
    speed: function speed() {
      this.PvideoLoading = true;
      this.beforeSeconds += -20;
      this.afterSeconds += 20;
      this.getVideo();
    },

    //后退20s
    back: function back() {
      this.PvideoLoading = true;
      this.beforeSeconds += 20;
      this.afterSeconds += -20;
      this.getVideo();
    },
    closeVideo: function closeVideo() {
      clearInterval(this.interval); //停止
      var param = void 0;
      if (this.cmdId == -1) {
        param = {
          anchangId: this.viedoACid,
          url: this.videoSrc
        };
      } else {
        param = {
          anchangId: this.viedoACid,
          url: this.videoSrc,
          cmdId: this.cmdId
        };
      }
      this.$request.stopVideo(param).then(function (res) {});
      this.dialogVideo = false;
    },


    /*************  请求列表   ******************/
    getEquipmentList: function getEquipmentList(value) {
      var _this12 = this;

      var name = "";
      this.loading = true;

      //后台请求列表接口
      getName(this.data2, this.activeId);
      function getName(arr, id) {
        arr.forEach(function (item, index) {
          if (item.id == id) {
            name = item.name;
          }
        });
      }
      if (value) {
        name = value;
      } else {
        getName(this.data2, this.activeId);
      }
      this.$request.getAnchangImg({
        cityName: this.activeId,
        corId: this.activeCor,
        anchangIds: this.anchangIds
      }).then(function (res) {
        if (res.status == 200 && res.data.code == 1000) {
          var list = res.data.data;
          _this12.anchangList = list;
          if (_this12.radio == 4 && _this12.anchangList.length > 0) {
            _this12.chooseAnchang4(_this12.anchangList[0].id);
          }
          _this12.total = res.data.data.total;
          _this12.currentPage = res.data.data.pageNum;
          _this12.loading = false;
        } else {
          _this12.anchangList = [];
          _this12.total = 0;
          _this12.loading = false;
        }
      }).catch(function (error) {
        _this12.$message({
          type: "error",
          message: "请求超时，请稍后重试",
          duration: 1000
        });
      });
    },


    //视频核验
    videoSearch: function videoSearch() {
      var _this13 = this;

      if (!this.videoDate || !this.videoTime) {
        this.$message({
          type: "error",
          message: "请选择时间",
          duration: 1000
        });
        return;
      }
      if (!this.videoLocal) {
        this.$message({
          type: "warning",
          message: "请选择设备！",
          duration: 1000
        });
        return;
      }

      var start = this.common.getTime(this.videoTime[0]).split(" ")[1].myReplace(":", "");
      var end = this.common.getTime(this.videoTime[1]).split(" ")[1].myReplace(":", "");
      var dates = this.videoDate.split("-");
      var date = "";
      for (var i = 0; i < dates.length; i++) {
        if (dates[i] < 10 && dates[i].length < 2) {
          date += "0" + dates[i];
        } else {
          date += dates[i];
        }
      }

      this.videoLoading = true;
      var data = {
        anchangId: this.radioChoose,
        beginTime: date + "t" + start + "z",
        endTime: date + "t" + end + "z",
        camId: this.videoLocal
      };
      this.$request.getMp4(data).then(function (res) {
        console.log(res.data);
        if (res.data.code == 1000) {
          var func = function func() {
            //定时任务
            count++;
            console.log(count);
            axios.get(checkUrl + "?temp=" + Math.random()).then(function (response) {
              if (response.data == "OK") {
                _this.vSrc = playUrl;
                _this.videoLoading = false;
                clearInterval(interval); //停止
              }
              if (response.data == "ER") {
                _this.$message({
                  type: "error",
                  message: "获取视频失败",
                  duration: 1000
                });
                _this.videoLoading = false;
                clearInterval(interval); //停止
              }
              if (count == 20 && _this.vSrc == "") {
                _this.$message({
                  type: "error",
                  message: "获取视频失败",
                  duration: 1000
                });
                _this.videoLoading = false;
                clearInterval(interval); //停止
              }
            }).catch(function (error) {
              _this.$message({
                type: "error",
                message: "获取视频失败",
                duration: 1000
              });
              console.log("error=", error);
              _this.videoLoading = false;
              clearInterval(interval); //停止
            });
          };

          var count = 0;
          var checkUrl = res.data.data.checkUrl;
          var playUrl = res.data.data.playUrl;
          var _this = _this13;

          var interval = setInterval(func, 6000); //轮询
        } else {
          _this13.$message({
            type: "error",
            message: res.data.msg,
            duration: 2000
          });
          _this13.videoLoading = false;
        }
      }).catch(function (err) {
        _this13.$message({
          type: "error",
          message: "请求超时，请稍后重试",
          duration: 1000
        });
        _this13.videoLoading = false;
      });
    },


    //选择设备
    chooseEquip: function chooseEquip(id, index) {
      var that = this;
      console.log("设备id=", id);
      that.videoLocal = id;
      for (var i = 0; i < this.equiplists.length; i++) {
        if (i == index) {
          that.equiplists[i].shadow = "always";
        } else {
          that.equiplists[i].shadow = "hover";
        }
      }
    },


    //优化拍照核验的切换，数据清空
    empty: function empty() {
      this.isShowImgsList = [];
      this.imageUrl1 = "";
      this.isShowSearch = false;
      this.isShowTable = false;
      this.searchTotal = 0;
      this.showTips = false;
    }
  }
});
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-fcccfeba","hasScoped":true,"transformToRequire":{"video":["src","poster"],"source":"src","img":"src","image":"xlink:href"},"buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/windControl.vue
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"equipment"},[_c('div',{staticClass:"tree-list"},[_c('p',[_vm._v("城市列表：")]),_vm._v(" "),_c('el-tree',{directives:[{name:"loading",rawName:"v-loading",value:(_vm.loadingEq),expression:"loadingEq"}],ref:"tree2",attrs:{"data":_vm.data2,"props":_vm.defaultProps,"expand-on-click-node":false,"default-expand-all":"","highlight-current":"","node-key":"fid"},on:{"node-click":_vm.clickNode}})],1),_vm._v(" "),_c('div',{staticClass:"equipmentFrom"},[_vm._m(0),_vm._v(" "),_c('div',{staticClass:"twoRadio"},[_c('el-radio',{attrs:{"label":"1"},on:{"change":function($event){return _vm.showone()}},model:{value:(_vm.radio),callback:function ($$v) {_vm.radio=$$v},expression:"radio"}},[_vm._v("签约核验")]),_vm._v(" "),(_vm.showPhoto)?_c('el-radio',{attrs:{"label":"2"},on:{"change":function($event){return _vm.showtwo()}},model:{value:(_vm.radio),callback:function ($$v) {_vm.radio=$$v},expression:"radio"}},[_vm._v("拍照核验")]):_vm._e(),_vm._v(" "),(_vm.cityId!=4&&_vm.cityId!=5)?_c('el-radio',{attrs:{"label":"4"},on:{"change":function($event){return _vm.showthree()}},model:{value:(_vm.radio),callback:function ($$v) {_vm.radio=$$v},expression:"radio"}},[_vm._v("视频核验")]):_vm._e()],1),_vm._v(" "),(_vm.radio==1)?_c('div',[_c('ul',{staticClass:"containt"},_vm._l((_vm.anchangList),function(item){return _c('li',{directives:[{name:"show",rawName:"v-show",value:(_vm.radio==1),expression:"radio==1"}],key:item.id,on:{"click":function($event){return _vm.handleClick(item)}}},[_c('img',{staticClass:"field-img",attrs:{"src":_vm.imagePath+item.imageUrl,"alt":""}}),_vm._v(" "),_c('div',{staticClass:"text"},[_c('div',{staticClass:"a"},[_c('p',{staticClass:"name"},[_vm._v(_vm._s(item.name))])])])])}),0)]):(_vm.radio==4)?_c('div',[_c('p',{staticClass:"notice"},[_vm._v("注意：请连接本地局域网启用此功能！")]),_vm._v(" "),_c('ul',{staticClass:"containt"},[_c('el-radio-group',{staticStyle:{"display":"block"},model:{value:(_vm.radioChoose),callback:function ($$v) {_vm.radioChoose=$$v},expression:"radioChoose"}},_vm._l((_vm.anchangList),function(item){return _c('li',{key:item.id,on:{"click":function($event){return _vm.chooseAnchang4(item.id)}}},[_c('img',{staticClass:"field-img",attrs:{"src":_vm.imagePath+item.imageUrl}}),_vm._v(" "),_c('div',{staticClass:"text"},[_c('div',{staticClass:"a"},[_c('p',{staticClass:"name"},[_vm._v(_vm._s(item.name))])]),_vm._v(" "),_c('el-radio',{staticClass:"sel",attrs:{"label":item.id}},[_vm._v(_vm._s(''))])],1)])}),0)],1),_vm._v(" "),_c('div',{staticStyle:{"margin-left":"20px"}},[_vm._v("\n        选择时间：\n        "),_c('el-date-picker',{attrs:{"type":"date","placeholder":"选择日期","format":"yyyy 年 MM 月 dd 日","value-format":"yyyy-MM-dd"},model:{value:(_vm.videoDate),callback:function ($$v) {_vm.videoDate=$$v},expression:"videoDate"}}),_vm._v(" "),_c('el-time-picker',{attrs:{"is-range":"","range-separator":"至","start-placeholder":"开始时间","end-placeholder":"结束时间","placeholder":"选择时间范围"},model:{value:(_vm.videoTime),callback:function ($$v) {_vm.videoTime=$$v},expression:"videoTime"}}),_vm._v(" "),_c('el-button',{attrs:{"type":"success","size":"medium"},on:{"click":_vm.videoSearch}},[_vm._v("查看视频")])],1),_vm._v(" "),_c('div',{staticClass:"equipList"},[_c('div',{attrs:{"span":4}},[_c('p',[_vm._v("选择设备：")]),_vm._v(" "),(_vm.equiplists.length!==0)?_c('div',{attrs:{"id":"equipList"}},_vm._l((_vm.equiplists),function(item,index){return _c('el-card',{key:item.areaId,staticClass:"card",attrs:{"shadow":item.shadow},nativeOn:{"click":function($event){return _vm.chooseEquip(item.id, index)}}},[_vm._v("\n              "+_vm._s(item.name)+"\n            ")])}),1):_c('p',[_vm._v("暂无设备！")])]),_vm._v(" "),_c('div',{staticStyle:{"margin":"20px 0 0 50px"}},[_c('p',{directives:[{name:"show",rawName:"v-show",value:(_vm.videoLoading),expression:"videoLoading"}]},[_vm._v("视频获取中...请耐心等待\n            "),_c('i',{staticClass:"el-icon-loading"})]),_vm._v(" "),_c('video',{staticClass:"centeredVideo",attrs:{"src":_vm.vSrc,"name":"videoElement","controls":"","autoplay":"","height":"380"}},[_vm._v("\n            Your browser is too old which doesn't support HTML5 video.\n          ")])])])]):_c('div',[_c('ul',{staticClass:"containt"},[_c('el-checkbox-group',{model:{value:(_vm.checkList),callback:function ($$v) {_vm.checkList=$$v},expression:"checkList"}},_vm._l((_vm.anchangList),function(item){return _c('li',{key:item.id,on:{"click":function($event){return _vm.chooseAnchang(item.id,item.name)}}},[_c('img',{staticClass:"field-img",attrs:{"src":_vm.imagePath+item.imageUrl}}),_vm._v(" "),_c('div',{staticClass:"text"},[_c('div',{staticClass:"a"},[_c('p',{staticClass:"name"},[_vm._v(_vm._s(item.name))])]),_vm._v(" "),_c('el-checkbox',{staticClass:"sel",attrs:{"label":item.id}},[_vm._v(_vm._s(''))])],1)])}),0)],1),_vm._v(" "),_c('el-form',{ref:"ruleForm",staticClass:"demo-ruleForm",attrs:{"model":_vm.ruleForm,"rules":_vm.rules,"label-width":"100px"}},[_c('el-form-item',{ref:"imageUrl",attrs:{"label":"上传图片","prop":"imageUrl"}},[_c('el-upload',{staticClass:"add-uploader",attrs:{"action":"","auto-upload":false,"show-file-list":false,"on-change":_vm.imageChange}},[(_vm.imageUrl1)?_c('img',{staticClass:"add",attrs:{"src":_vm.imageUrl1}}):_c('i',{staticClass:"el-icon-plus add-uploader-icon"})])],1)],1),_vm._v(" "),_c('el-checkbox-group',{model:{value:(_vm.checkListIsShow),callback:function ($$v) {_vm.checkListIsShow=$$v},expression:"checkListIsShow"}},_vm._l((_vm.isShowImgsList),function(item,index){return _c('div',{key:index,staticClass:"img-list1"},[_c('el-image',{staticStyle:{"width":"80px","height":"80px"},attrs:{"src":_vm.riskPath+item,"fit":"fill"},on:{"click":function($event){return _vm.selImage2(index)}}}),_vm._v(" "),_c('el-checkbox',{staticClass:"check1",attrs:{"label":index},on:{"change":function($event){return _vm.selImage2(index)}}},[_vm._v(_vm._s(''))])],1)}),0),_vm._v(" "),_c('el-dialog',{attrs:{"title":"确认图片","visible":_vm.dialogImg,"width":"30%","close-on-click-modal":false},on:{"update:visible":function($event){_vm.dialogImg=$event}}},[_c('p',{staticStyle:{"margin-top":"0"}},[_vm._v("原始图片：")]),_vm._v(" "),_c('canvas',{staticStyle:{"margin":"0 auto"},attrs:{"id":"myCanvas","width":400,"height":300}}),_vm._v(" "),_c('p',{staticStyle:{"margin-bottom":"5px"}},[_vm._v("识别结果：")]),_vm._v(" "),_c('el-checkbox-group',{model:{value:(_vm.checkListConfirmImg),callback:function ($$v) {_vm.checkListConfirmImg=$$v},expression:"checkListConfirmImg"}},_vm._l((_vm.allImgList),function(item,index){return _c('div',{key:index,staticClass:"img-list"},[_c('el-image',{staticStyle:{"width":"100px","height":"100px"},attrs:{"src":_vm.riskPath+item,"fit":"fill"},on:{"click":function($event){return _vm.selImage(index)}}}),_vm._v(" "),_c('el-checkbox',{staticClass:"check",attrs:{"label":index}},[_vm._v(_vm._s(''))])],1)}),0),_vm._v(" "),_c('div',{staticClass:"dialog-footer",attrs:{"slot":"footer"},slot:"footer"},[_c('el-button',{on:{"click":function($event){_vm.dialogImg = false}}},[_vm._v("取 消")]),_vm._v(" "),_c('el-button',{attrs:{"type":"primary","loading":_vm.btnLodiing},on:{"click":_vm.handleClose}},[_vm._v("开始识别")])],1)],1),_vm._v(" "),_c('el-row',{directives:[{name:"show",rawName:"v-show",value:(_vm.isShowSearch),expression:"isShowSearch"}],staticClass:"searchBox"},[_c('el-date-picker',{attrs:{"size":"small","type":"date","placeholder":"选择日期","format":"yyyy 年 MM 月 dd 日","value-format":"yyyy-MM-dd"},model:{value:(_vm.photoDate),callback:function ($$v) {_vm.photoDate=$$v},expression:"photoDate"}}),_vm._v(" "),_c('el-time-picker',{attrs:{"size":"small","is-range":"","range-separator":"至","start-placeholder":"开始时间","end-placeholder":"结束时间","placeholder":"选择时间范围"},model:{value:(_vm.photoTime),callback:function ($$v) {_vm.photoTime=$$v},expression:"photoTime"}}),_vm._v(" "),_c('el-select',{attrs:{"size":"small","placeholder":"选择性别"},model:{value:(_vm.sexChoose),callback:function ($$v) {_vm.sexChoose=$$v},expression:"sexChoose"}},_vm._l((_vm.sexOptions),function(item){return _c('el-option',{key:item.value,attrs:{"label":item.label,"value":item.value}})}),1),_vm._v(" "),_c('el-select',{attrs:{"size":"small","placeholder":"选择年龄"},model:{value:(_vm.ageChoose),callback:function ($$v) {_vm.ageChoose=$$v},expression:"ageChoose"}},_vm._l((_vm.ageOptions),function(item){return _c('el-option',{key:item.value,attrs:{"label":item.label,"value":item.value}})}),1),_vm._v("\n         \n        "),_c('el-button',{attrs:{"type":"success","size":"small"},on:{"click":_vm.doSearch}},[_vm._v("查询")]),_vm._v(" "),_c('el-button',{attrs:{"type":"warning","size":"small"},on:{"click":_vm.reset}},[_vm._v("重置")])],1),_vm._v(" "),_c('p',{directives:[{name:"show",rawName:"v-show",value:(_vm.isShowTip),expression:"isShowTip"}],staticStyle:{"text-align":"center"}},[_vm._v("请先确定搜索范围！")]),_vm._v(" "),_c('p',{directives:[{name:"show",rawName:"v-show",value:(_vm.showTips),expression:"showTips"}],staticStyle:{"color":"#903c31","margin-left":"20px"}},[_vm._v("由于该案场配置为截图版，需要一些时间用于截图，目前您可能只能看到部分图片，请耐心等待图片生成。或者您可以通过查看相关视频片段进行核验。")]),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.isShowTable),expression:"isShowTable"}],staticClass:"con-table"},[_c('el-table',{directives:[{name:"loading",rawName:"v-loading",value:(_vm.loading),expression:"loading"}],ref:"multipleTable",staticStyle:{"width":"100%"},attrs:{"data":_vm.tableData,"border":"","empty-text":_vm.haveData,"element-loading-text":"正在搜索","element-loading-spinner":"el-icon-loading","element-loading-background":"rgba(0, 0, 0, 0.8)"},on:{"selection-change":_vm.handleSelectionChange,"sort-change":_vm.sortChange}},[_c('el-table-column',{attrs:{"type":"selection","width":"55"}}),_vm._v(" "),_c('el-table-column',{attrs:{"type":"index","width":"50","label":"序号"}}),_vm._v(" "),_c('el-table-column',{attrs:{"prop":"name","label":"项目名称","show-overflow-tooltip":""},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var row = ref.row;
return [_vm._v(_vm._s(row.anchangName || '暂无数据'))]}}])}),_vm._v(" "),_c('el-table-column',{attrs:{"prop":"imageName","label":"照片","width":"120"},scopedSlots:_vm._u([{key:"default",fn:function(scope){return [(!(scope.row.imageName))?_c('span',[_vm._v("暂无图片")]):_vm._e(),_vm._v(" "),(scope.row.imageName)?_c('el-popover',{attrs:{"placement":"left","title":"","trigger":"hover"}},[_c('div',{staticClass:"contentImg",staticStyle:{"width":"310px"}},[_c('div',{staticClass:"contentImg_Box"},[_c('div',{staticClass:"contentImg_Box_img"},[_c('img',{staticClass:"head_pic",attrs:{"src":_vm.imagePath+scope.row.imageName,"height":"350px"}})]),_vm._v(" "),_c('div',{staticClass:"contentImg_Box_name"},[_vm._v("核验照片")])]),_vm._v(" "),_c('div',{staticClass:"contentImg_Box",staticStyle:{"margin-right":"10px"}},[_c('div',{staticClass:"contentImg_Box_img"},[_c('img',{staticClass:"head_pic",attrs:{"src":_vm.imageUrl,"height":"350px"}})]),_vm._v(" "),_c('div',{staticClass:"contentImg_Box_name"},[_vm._v("当前图片")])])]),_vm._v(" "),(_vm.version==1)?_c('img',{staticClass:"tableImg",staticStyle:{"max-width":"30px"},attrs:{"slot":"reference","src":_vm.imagePath+scope.row.imageName},slot:"reference"}):_vm._e()]):_vm._e(),_vm._v(" "),(scope.row.imageName)?_c('el-popover',{attrs:{"placement":"top","title":"","trigger":"hover"}},[_c('div',{staticClass:"compareImages"},[_c('compare-image',{attrs:{"src1":_vm.imagePath+scope.row.imageName,"src2":_vm.imageUrl,"x":scope.row.x,"y":scope.row.y,"width":scope.row.width,"height":scope.row.height}})],1),_vm._v(" "),(_vm.version!=1)?_c('img',{staticClass:"tableImg",attrs:{"slot":"reference","src":_vm.imagePath+scope.row.imageName},slot:"reference"}):_vm._e()]):_vm._e()]}}])}),_vm._v(" "),(_vm.showPreview)?_c('el-table-column',{attrs:{"prop":"preview","label":"视频预览","width":"120"},scopedSlots:_vm._u([{key:"default",fn:function(scope){return [_c('video',{staticStyle:{"width":"100%"},attrs:{"src":"","id":'table'+scope.row.id,"loop":"","muted":"","autoplay":""},domProps:{"muted":true},on:{"click":function($event){return _vm.watchVideo($event)}}}),_vm._v(" "),_c('p',{staticStyle:{"display":"none"},attrs:{"id":'text'+scope.row.id}},[_vm._v("视频加载失败")])]}}],null,false,3950161630)}):_vm._e(),_vm._v(" "),_c('el-table-column',{attrs:{"prop":"createTime","label":"到访时间","sortable":_vm.howSort},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var row = ref.row;
return [_vm._v(_vm._s(_vm.common.getTime(row.createTime)))]}}])}),_vm._v(" "),_c('el-table-column',{attrs:{"prop":"createTime","label":"位置","width":"120"},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var row = ref.row;
return [_vm._v(_vm._s(row.camName || '暂无数据'))]}}])}),_vm._v(" "),_c('el-table-column',{attrs:{"prop":"similarity","label":"相似度","sortable":_vm.howSort},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var row = ref.row;
return [_vm._v(_vm._s(row.similarity?row.similarity.toFixed(3):"暂无数据"))]}}])}),_vm._v(" "),_c('el-table-column',{attrs:{"prop":"operation","label":"操作","width":"120"},scopedSlots:_vm._u([{key:"default",fn:function(scope){return [_c('el-button',{attrs:{"size":"mini","type":"success"},on:{"click":function($event){return _vm.openVideo(scope.$index, scope.row)}}},[_vm._v("查看录像")])]}}])})],1)],1),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.searchTotal!=0),expression:"searchTotal!=0"}],staticClass:"flowMangement-page"},[_c('el-pagination',{attrs:{"current-page":_vm.searchCurrentPage,"page-size":_vm.searchPageSize,"layout":"total, prev, pager, next, jumper","total":_vm.searchTotal},on:{"size-change":_vm.handleSizeChange,"current-change":_vm.directHandleCurrentChange}})],1),_vm._v(" "),_c('el-dialog',{attrs:{"title":"查看录像","before-close":_vm.closeVideo,"visible":_vm.dialogVideo,"width":"50%"},on:{"update:visible":function($event){_vm.dialogVideo=$event}}},[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.PvideoLoading),expression:"PvideoLoading"}],staticStyle:{"text-align":"center","padding":"40px"}},[_c('i',{staticClass:"el-icon-loading",staticStyle:{"font-size":"50px"}})]),_vm._v(" "),_c('video',{directives:[{name:"show",rawName:"v-show",value:(!_vm.PvideoLoading),expression:"!PvideoLoading"}],staticStyle:{"width":"100%"},attrs:{"src":"","id":"videoElement","muted":"","autoplay":""},domProps:{"muted":true}},[_vm._v("\n          Your browser is too old which doesn't support HTML5 video.\n        ")]),_vm._v(" "),_c('el-button',{attrs:{"size":"mini"},on:{"click":_vm.back}},[_vm._v("后退20s")]),_vm._v(" "),_c('el-button',{attrs:{"size":"mini"},on:{"click":_vm.speed}},[_vm._v("快进20s")])],1),_vm._v(" "),_c('el-dialog',{attrs:{"title":"视频预览","visible":_vm.innerVideo,"before-close":_vm.handleClose1,"width":"50%"},on:{"update:visible":function($event){_vm.innerVideo=$event}}},[_c('video',{staticStyle:{"width":"100%"},attrs:{"id":"viewVideo","src":"","muted":"","autoplay":""},domProps:{"muted":true}})])],1)])])}
var staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"equipment-title el-row"},[_c('span',{staticClass:"equipment-title_liner"}),_vm._v(" "),_c('span',{staticClass:"equipment-title_text"},[_vm._v("智慧风控")])])}]
var esExports = { render: render, staticRenderFns: staticRenderFns }
/* harmony default export */ var components_windControl = (esExports);
// CONCATENATED MODULE: ./src/components/windControl.vue
function injectStyle (ssrContext) {
  __webpack_require__("KbQ5")
}
var normalizeComponent = __webpack_require__("VU/8")
/* script */


/* template */

/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = injectStyle
/* scopeId */
var __vue_scopeId__ = "data-v-fcccfeba"
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  windControl,
  components_windControl,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)

/* harmony default export */ var src_components_windControl = __webpack_exports__["default"] = (Component.exports);


/***/ }),

/***/ "sbrb":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function() {

    var debug = false;

    var root = this;

    var EXIF = function(obj) {
        if (obj instanceof EXIF) return obj;
        if (!(this instanceof EXIF)) return new EXIF(obj);
        this.EXIFwrapped = obj;
    };

    if (true) {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = EXIF;
        }
        exports.EXIF = EXIF;
    } else {
        root.EXIF = EXIF;
    }

    var ExifTags = EXIF.Tags = {

        // version tags
        0x9000 : "ExifVersion",             // EXIF version
        0xA000 : "FlashpixVersion",         // Flashpix format version

        // colorspace tags
        0xA001 : "ColorSpace",              // Color space information tag

        // image configuration
        0xA002 : "PixelXDimension",         // Valid width of meaningful image
        0xA003 : "PixelYDimension",         // Valid height of meaningful image
        0x9101 : "ComponentsConfiguration", // Information about channels
        0x9102 : "CompressedBitsPerPixel",  // Compressed bits per pixel

        // user information
        0x927C : "MakerNote",               // Any desired information written by the manufacturer
        0x9286 : "UserComment",             // Comments by user

        // related file
        0xA004 : "RelatedSoundFile",        // Name of related sound file

        // date and time
        0x9003 : "DateTimeOriginal",        // Date and time when the original image was generated
        0x9004 : "DateTimeDigitized",       // Date and time when the image was stored digitally
        0x9290 : "SubsecTime",              // Fractions of seconds for DateTime
        0x9291 : "SubsecTimeOriginal",      // Fractions of seconds for DateTimeOriginal
        0x9292 : "SubsecTimeDigitized",     // Fractions of seconds for DateTimeDigitized

        // picture-taking conditions
        0x829A : "ExposureTime",            // Exposure time (in seconds)
        0x829D : "FNumber",                 // F number
        0x8822 : "ExposureProgram",         // Exposure program
        0x8824 : "SpectralSensitivity",     // Spectral sensitivity
        0x8827 : "ISOSpeedRatings",         // ISO speed rating
        0x8828 : "OECF",                    // Optoelectric conversion factor
        0x9201 : "ShutterSpeedValue",       // Shutter speed
        0x9202 : "ApertureValue",           // Lens aperture
        0x9203 : "BrightnessValue",         // Value of brightness
        0x9204 : "ExposureBias",            // Exposure bias
        0x9205 : "MaxApertureValue",        // Smallest F number of lens
        0x9206 : "SubjectDistance",         // Distance to subject in meters
        0x9207 : "MeteringMode",            // Metering mode
        0x9208 : "LightSource",             // Kind of light source
        0x9209 : "Flash",                   // Flash status
        0x9214 : "SubjectArea",             // Location and area of main subject
        0x920A : "FocalLength",             // Focal length of the lens in mm
        0xA20B : "FlashEnergy",             // Strobe energy in BCPS
        0xA20C : "SpatialFrequencyResponse",    //
        0xA20E : "FocalPlaneXResolution",   // Number of pixels in width direction per FocalPlaneResolutionUnit
        0xA20F : "FocalPlaneYResolution",   // Number of pixels in height direction per FocalPlaneResolutionUnit
        0xA210 : "FocalPlaneResolutionUnit",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution
        0xA214 : "SubjectLocation",         // Location of subject in image
        0xA215 : "ExposureIndex",           // Exposure index selected on camera
        0xA217 : "SensingMethod",           // Image sensor type
        0xA300 : "FileSource",              // Image source (3 == DSC)
        0xA301 : "SceneType",               // Scene type (1 == directly photographed)
        0xA302 : "CFAPattern",              // Color filter array geometric pattern
        0xA401 : "CustomRendered",          // Special processing
        0xA402 : "ExposureMode",            // Exposure mode
        0xA403 : "WhiteBalance",            // 1 = auto white balance, 2 = manual
        0xA404 : "DigitalZoomRation",       // Digital zoom ratio
        0xA405 : "FocalLengthIn35mmFilm",   // Equivalent foacl length assuming 35mm film camera (in mm)
        0xA406 : "SceneCaptureType",        // Type of scene
        0xA407 : "GainControl",             // Degree of overall image gain adjustment
        0xA408 : "Contrast",                // Direction of contrast processing applied by camera
        0xA409 : "Saturation",              // Direction of saturation processing applied by camera
        0xA40A : "Sharpness",               // Direction of sharpness processing applied by camera
        0xA40B : "DeviceSettingDescription",    //
        0xA40C : "SubjectDistanceRange",    // Distance to subject

        // other tags
        0xA005 : "InteroperabilityIFDPointer",
        0xA420 : "ImageUniqueID"            // Identifier assigned uniquely to each image
    };

    var TiffTags = EXIF.TiffTags = {
        0x0100 : "ImageWidth",
        0x0101 : "ImageHeight",
        0x8769 : "ExifIFDPointer",
        0x8825 : "GPSInfoIFDPointer",
        0xA005 : "InteroperabilityIFDPointer",
        0x0102 : "BitsPerSample",
        0x0103 : "Compression",
        0x0106 : "PhotometricInterpretation",
        0x0112 : "Orientation",
        0x0115 : "SamplesPerPixel",
        0x011C : "PlanarConfiguration",
        0x0212 : "YCbCrSubSampling",
        0x0213 : "YCbCrPositioning",
        0x011A : "XResolution",
        0x011B : "YResolution",
        0x0128 : "ResolutionUnit",
        0x0111 : "StripOffsets",
        0x0116 : "RowsPerStrip",
        0x0117 : "StripByteCounts",
        0x0201 : "JPEGInterchangeFormat",
        0x0202 : "JPEGInterchangeFormatLength",
        0x012D : "TransferFunction",
        0x013E : "WhitePoint",
        0x013F : "PrimaryChromaticities",
        0x0211 : "YCbCrCoefficients",
        0x0214 : "ReferenceBlackWhite",
        0x0132 : "DateTime",
        0x010E : "ImageDescription",
        0x010F : "Make",
        0x0110 : "Model",
        0x0131 : "Software",
        0x013B : "Artist",
        0x8298 : "Copyright"
    };

    var GPSTags = EXIF.GPSTags = {
        0x0000 : "GPSVersionID",
        0x0001 : "GPSLatitudeRef",
        0x0002 : "GPSLatitude",
        0x0003 : "GPSLongitudeRef",
        0x0004 : "GPSLongitude",
        0x0005 : "GPSAltitudeRef",
        0x0006 : "GPSAltitude",
        0x0007 : "GPSTimeStamp",
        0x0008 : "GPSSatellites",
        0x0009 : "GPSStatus",
        0x000A : "GPSMeasureMode",
        0x000B : "GPSDOP",
        0x000C : "GPSSpeedRef",
        0x000D : "GPSSpeed",
        0x000E : "GPSTrackRef",
        0x000F : "GPSTrack",
        0x0010 : "GPSImgDirectionRef",
        0x0011 : "GPSImgDirection",
        0x0012 : "GPSMapDatum",
        0x0013 : "GPSDestLatitudeRef",
        0x0014 : "GPSDestLatitude",
        0x0015 : "GPSDestLongitudeRef",
        0x0016 : "GPSDestLongitude",
        0x0017 : "GPSDestBearingRef",
        0x0018 : "GPSDestBearing",
        0x0019 : "GPSDestDistanceRef",
        0x001A : "GPSDestDistance",
        0x001B : "GPSProcessingMethod",
        0x001C : "GPSAreaInformation",
        0x001D : "GPSDateStamp",
        0x001E : "GPSDifferential"
    };

     // EXIF 2.3 Spec
    var IFD1Tags = EXIF.IFD1Tags = {
        0x0100: "ImageWidth",
        0x0101: "ImageHeight",
        0x0102: "BitsPerSample",
        0x0103: "Compression",
        0x0106: "PhotometricInterpretation",
        0x0111: "StripOffsets",
        0x0112: "Orientation",
        0x0115: "SamplesPerPixel",
        0x0116: "RowsPerStrip",
        0x0117: "StripByteCounts",
        0x011A: "XResolution",
        0x011B: "YResolution",
        0x011C: "PlanarConfiguration",
        0x0128: "ResolutionUnit",
        0x0201: "JpegIFOffset",    // When image format is JPEG, this value show offset to JPEG data stored.(aka "ThumbnailOffset" or "JPEGInterchangeFormat")
        0x0202: "JpegIFByteCount", // When image format is JPEG, this value shows data size of JPEG image (aka "ThumbnailLength" or "JPEGInterchangeFormatLength")
        0x0211: "YCbCrCoefficients",
        0x0212: "YCbCrSubSampling",
        0x0213: "YCbCrPositioning",
        0x0214: "ReferenceBlackWhite"
    };

    var StringValues = EXIF.StringValues = {
        ExposureProgram : {
            0 : "Not defined",
            1 : "Manual",
            2 : "Normal program",
            3 : "Aperture priority",
            4 : "Shutter priority",
            5 : "Creative program",
            6 : "Action program",
            7 : "Portrait mode",
            8 : "Landscape mode"
        },
        MeteringMode : {
            0 : "Unknown",
            1 : "Average",
            2 : "CenterWeightedAverage",
            3 : "Spot",
            4 : "MultiSpot",
            5 : "Pattern",
            6 : "Partial",
            255 : "Other"
        },
        LightSource : {
            0 : "Unknown",
            1 : "Daylight",
            2 : "Fluorescent",
            3 : "Tungsten (incandescent light)",
            4 : "Flash",
            9 : "Fine weather",
            10 : "Cloudy weather",
            11 : "Shade",
            12 : "Daylight fluorescent (D 5700 - 7100K)",
            13 : "Day white fluorescent (N 4600 - 5400K)",
            14 : "Cool white fluorescent (W 3900 - 4500K)",
            15 : "White fluorescent (WW 3200 - 3700K)",
            17 : "Standard light A",
            18 : "Standard light B",
            19 : "Standard light C",
            20 : "D55",
            21 : "D65",
            22 : "D75",
            23 : "D50",
            24 : "ISO studio tungsten",
            255 : "Other"
        },
        Flash : {
            0x0000 : "Flash did not fire",
            0x0001 : "Flash fired",
            0x0005 : "Strobe return light not detected",
            0x0007 : "Strobe return light detected",
            0x0009 : "Flash fired, compulsory flash mode",
            0x000D : "Flash fired, compulsory flash mode, return light not detected",
            0x000F : "Flash fired, compulsory flash mode, return light detected",
            0x0010 : "Flash did not fire, compulsory flash mode",
            0x0018 : "Flash did not fire, auto mode",
            0x0019 : "Flash fired, auto mode",
            0x001D : "Flash fired, auto mode, return light not detected",
            0x001F : "Flash fired, auto mode, return light detected",
            0x0020 : "No flash function",
            0x0041 : "Flash fired, red-eye reduction mode",
            0x0045 : "Flash fired, red-eye reduction mode, return light not detected",
            0x0047 : "Flash fired, red-eye reduction mode, return light detected",
            0x0049 : "Flash fired, compulsory flash mode, red-eye reduction mode",
            0x004D : "Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",
            0x004F : "Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",
            0x0059 : "Flash fired, auto mode, red-eye reduction mode",
            0x005D : "Flash fired, auto mode, return light not detected, red-eye reduction mode",
            0x005F : "Flash fired, auto mode, return light detected, red-eye reduction mode"
        },
        SensingMethod : {
            1 : "Not defined",
            2 : "One-chip color area sensor",
            3 : "Two-chip color area sensor",
            4 : "Three-chip color area sensor",
            5 : "Color sequential area sensor",
            7 : "Trilinear sensor",
            8 : "Color sequential linear sensor"
        },
        SceneCaptureType : {
            0 : "Standard",
            1 : "Landscape",
            2 : "Portrait",
            3 : "Night scene"
        },
        SceneType : {
            1 : "Directly photographed"
        },
        CustomRendered : {
            0 : "Normal process",
            1 : "Custom process"
        },
        WhiteBalance : {
            0 : "Auto white balance",
            1 : "Manual white balance"
        },
        GainControl : {
            0 : "None",
            1 : "Low gain up",
            2 : "High gain up",
            3 : "Low gain down",
            4 : "High gain down"
        },
        Contrast : {
            0 : "Normal",
            1 : "Soft",
            2 : "Hard"
        },
        Saturation : {
            0 : "Normal",
            1 : "Low saturation",
            2 : "High saturation"
        },
        Sharpness : {
            0 : "Normal",
            1 : "Soft",
            2 : "Hard"
        },
        SubjectDistanceRange : {
            0 : "Unknown",
            1 : "Macro",
            2 : "Close view",
            3 : "Distant view"
        },
        FileSource : {
            3 : "DSC"
        },

        Components : {
            0 : "",
            1 : "Y",
            2 : "Cb",
            3 : "Cr",
            4 : "R",
            5 : "G",
            6 : "B"
        }
    };

    function addEvent(element, event, handler) {
        if (element.addEventListener) {
            element.addEventListener(event, handler, false);
        } else if (element.attachEvent) {
            element.attachEvent("on" + event, handler);
        }
    }

    function imageHasData(img) {
        return !!(img.exifdata);
    }


    function base64ToArrayBuffer(base64, contentType) {
        contentType = contentType || base64.match(/^data\:([^\;]+)\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'
        base64 = base64.replace(/^data\:([^\;]+)\;base64,/gmi, '');
        var binary = atob(base64);
        var len = binary.length;
        var buffer = new ArrayBuffer(len);
        var view = new Uint8Array(buffer);
        for (var i = 0; i < len; i++) {
            view[i] = binary.charCodeAt(i);
        }
        return buffer;
    }

    function objectURLToBlob(url, callback) {
        var http = new XMLHttpRequest();
        http.open("GET", url, true);
        http.responseType = "blob";
        http.onload = function(e) {
            if (this.status == 200 || this.status === 0) {
                callback(this.response);
            }
        };
        http.send();
    }

    function getImageData(img, callback) {
        function handleBinaryFile(binFile) {
            var data = findEXIFinJPEG(binFile);
            img.exifdata = data || {};
            var iptcdata = findIPTCinJPEG(binFile);
            img.iptcdata = iptcdata || {};
            if (EXIF.isXmpEnabled) {
               var xmpdata= findXMPinJPEG(binFile);
               img.xmpdata = xmpdata || {};               
            }
            if (callback) {
                callback.call(img);
            }
        }

        if (img.src) {
            if (/^data\:/i.test(img.src)) { // Data URI
                var arrayBuffer = base64ToArrayBuffer(img.src);
                handleBinaryFile(arrayBuffer);

            } else if (/^blob\:/i.test(img.src)) { // Object URL
                var fileReader = new FileReader();
                fileReader.onload = function(e) {
                    handleBinaryFile(e.target.result);
                };
                objectURLToBlob(img.src, function (blob) {
                    fileReader.readAsArrayBuffer(blob);
                });
            } else {
                var http = new XMLHttpRequest();
                http.onload = function() {
                    if (this.status == 200 || this.status === 0) {
                        handleBinaryFile(http.response);
                    } else {
                        throw "Could not load image";
                    }
                    http = null;
                };
                http.open("GET", img.src, true);
                http.responseType = "arraybuffer";
                http.send(null);
            }
        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {
            var fileReader = new FileReader();
            fileReader.onload = function(e) {
                if (debug) console.log("Got file of length " + e.target.result.byteLength);
                handleBinaryFile(e.target.result);
            };

            fileReader.readAsArrayBuffer(img);
        }
    }

    function findEXIFinJPEG(file) {
        var dataView = new DataView(file);

        if (debug) console.log("Got file of length " + file.byteLength);
        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
            if (debug) console.log("Not a valid JPEG");
            return false; // not a valid jpeg
        }

        var offset = 2,
            length = file.byteLength,
            marker;

        while (offset < length) {
            if (dataView.getUint8(offset) != 0xFF) {
                if (debug) console.log("Not a valid marker at offset " + offset + ", found: " + dataView.getUint8(offset));
                return false; // not a valid marker, something is wrong
            }

            marker = dataView.getUint8(offset + 1);
            if (debug) console.log(marker);

            // we could implement handling for other markers here,
            // but we're only looking for 0xFFE1 for EXIF data

            if (marker == 225) {
                if (debug) console.log("Found 0xFFE1 marker");

                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);

                // offset += 2 + file.getShortAt(offset+2, true);

            } else {
                offset += 2 + dataView.getUint16(offset+2);
            }

        }

    }

    function findIPTCinJPEG(file) {
        var dataView = new DataView(file);

        if (debug) console.log("Got file of length " + file.byteLength);
        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
            if (debug) console.log("Not a valid JPEG");
            return false; // not a valid jpeg
        }

        var offset = 2,
            length = file.byteLength;


        var isFieldSegmentStart = function(dataView, offset){
            return (
                dataView.getUint8(offset) === 0x38 &&
                dataView.getUint8(offset+1) === 0x42 &&
                dataView.getUint8(offset+2) === 0x49 &&
                dataView.getUint8(offset+3) === 0x4D &&
                dataView.getUint8(offset+4) === 0x04 &&
                dataView.getUint8(offset+5) === 0x04
            );
        };

        while (offset < length) {

            if ( isFieldSegmentStart(dataView, offset )){

                // Get the length of the name header (which is padded to an even number of bytes)
                var nameHeaderLength = dataView.getUint8(offset+7);
                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;
                // Check for pre photoshop 6 format
                if(nameHeaderLength === 0) {
                    // Always 4
                    nameHeaderLength = 4;
                }

                var startOffset = offset + 8 + nameHeaderLength;
                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);

                return readIPTCData(file, startOffset, sectionLength);

                break;

            }


            // Not the marker, continue searching
            offset++;

        }

    }
    var IptcFieldMap = {
        0x78 : 'caption',
        0x6E : 'credit',
        0x19 : 'keywords',
        0x37 : 'dateCreated',
        0x50 : 'byline',
        0x55 : 'bylineTitle',
        0x7A : 'captionWriter',
        0x69 : 'headline',
        0x74 : 'copyright',
        0x0F : 'category'
    };
    function readIPTCData(file, startOffset, sectionLength){
        var dataView = new DataView(file);
        var data = {};
        var fieldValue, fieldName, dataSize, segmentType, segmentSize;
        var segmentStartPos = startOffset;
        while(segmentStartPos < startOffset+sectionLength) {
            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){
                segmentType = dataView.getUint8(segmentStartPos+2);
                if(segmentType in IptcFieldMap) {
                    dataSize = dataView.getInt16(segmentStartPos+3);
                    segmentSize = dataSize + 5;
                    fieldName = IptcFieldMap[segmentType];
                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);
                    // Check if we already stored a value with this name
                    if(data.hasOwnProperty(fieldName)) {
                        // Value already stored with this name, create multivalue field
                        if(data[fieldName] instanceof Array) {
                            data[fieldName].push(fieldValue);
                        }
                        else {
                            data[fieldName] = [data[fieldName], fieldValue];
                        }
                    }
                    else {
                        data[fieldName] = fieldValue;
                    }
                }

            }
            segmentStartPos++;
        }
        return data;
    }



    function readTags(file, tiffStart, dirStart, strings, bigEnd) {
        var entries = file.getUint16(dirStart, !bigEnd),
            tags = {},
            entryOffset, tag,
            i;

        for (i=0;i<entries;i++) {
            entryOffset = dirStart + i*12 + 2;
            tag = strings[file.getUint16(entryOffset, !bigEnd)];
            if (!tag && debug) console.log("Unknown tag: " + file.getUint16(entryOffset, !bigEnd));
            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);
        }
        return tags;
    }


    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {
        var type = file.getUint16(entryOffset+2, !bigEnd),
            numValues = file.getUint32(entryOffset+4, !bigEnd),
            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,
            offset,
            vals, val, n,
            numerator, denominator;

        switch (type) {
            case 1: // byte, 8-bit unsigned int
            case 7: // undefined, 8-bit byte, value depending on field
                if (numValues == 1) {
                    return file.getUint8(entryOffset + 8, !bigEnd);
                } else {
                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint8(offset + n);
                    }
                    return vals;
                }

            case 2: // ascii, 8-bit byte
                offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                return getStringFromDB(file, offset, numValues-1);

            case 3: // short, 16 bit int
                if (numValues == 1) {
                    return file.getUint16(entryOffset + 8, !bigEnd);
                } else {
                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);
                    }
                    return vals;
                }

            case 4: // long, 32 bit int
                if (numValues == 1) {
                    return file.getUint32(entryOffset + 8, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);
                    }
                    return vals;
                }

            case 5:    // rational = two long values, first is numerator, second is denominator
                if (numValues == 1) {
                    numerator = file.getUint32(valueOffset, !bigEnd);
                    denominator = file.getUint32(valueOffset+4, !bigEnd);
                    val = new Number(numerator / denominator);
                    val.numerator = numerator;
                    val.denominator = denominator;
                    return val;
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);
                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);
                        vals[n] = new Number(numerator / denominator);
                        vals[n].numerator = numerator;
                        vals[n].denominator = denominator;
                    }
                    return vals;
                }

            case 9: // slong, 32 bit signed int
                if (numValues == 1) {
                    return file.getInt32(entryOffset + 8, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);
                    }
                    return vals;
                }

            case 10: // signed rational, two slongs, first is numerator, second is denominator
                if (numValues == 1) {
                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);
                    }
                    return vals;
                }
        }
    }

    /**
    * Given an IFD (Image File Directory) start offset
    * returns an offset to next IFD or 0 if it's the last IFD.
    */
    function getNextIFDOffset(dataView, dirStart, bigEnd){
        //the first 2bytes means the number of directory entries contains in this IFD
        var entries = dataView.getUint16(dirStart, !bigEnd);

        // After last directory entry, there is a 4bytes of data,
        // it means an offset to next IFD.
        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.

        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd); // each entry is 12 bytes long
    }

    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd){
        // get the IFD1 offset
        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart+firstIFDOffset, bigEnd);

        if (!IFD1OffsetPointer) {
            // console.log('******** IFD1Offset is empty, image thumb not found ********');
            return {};
        }
        else if (IFD1OffsetPointer > dataView.byteLength) { // this should not happen
            // console.log('******** IFD1Offset is outside the bounds of the DataView ********');
            return {};
        }
        // console.log('*******  thumbnail IFD offset (IFD1) is: %s', IFD1OffsetPointer);

        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd)

        // EXIF 2.3 specification for JPEG format thumbnail

        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.
        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail
        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.
        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that
        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.

        if (thumbTags['Compression']) {
            // console.log('Thumbnail image found!');

            switch (thumbTags['Compression']) {
                case 6:
                    // console.log('Thumbnail image format is JPEG');
                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {
                    // extract the thumbnail
                        var tOffset = tiffStart + thumbTags.JpegIFOffset;
                        var tLength = thumbTags.JpegIFByteCount;
                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {
                            type: 'image/jpeg'
                        });
                    }
                break;

            case 1:
                console.log("Thumbnail image format is TIFF, which is not implemented.");
                break;
            default:
                console.log("Unknown thumbnail image format '%s'", thumbTags['Compression']);
            }
        }
        else if (thumbTags['PhotometricInterpretation'] == 2) {
            console.log("Thumbnail image format is RGB, which is not implemented.");
        }
        return thumbTags;
    }

    function getStringFromDB(buffer, start, length) {
        var outstr = "";
        for (n = start; n < start+length; n++) {
            outstr += String.fromCharCode(buffer.getUint8(n));
        }
        return outstr;
    }

    function readEXIFData(file, start) {
        if (getStringFromDB(file, start, 4) != "Exif") {
            if (debug) console.log("Not valid EXIF data! " + getStringFromDB(file, start, 4));
            return false;
        }

        var bigEnd,
            tags, tag,
            exifData, gpsData,
            tiffOffset = start + 6;

        // test for TIFF validity and endianness
        if (file.getUint16(tiffOffset) == 0x4949) {
            bigEnd = false;
        } else if (file.getUint16(tiffOffset) == 0x4D4D) {
            bigEnd = true;
        } else {
            if (debug) console.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)");
            return false;
        }

        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {
            if (debug) console.log("Not valid TIFF data! (no 0x002A)");
            return false;
        }

        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);

        if (firstIFDOffset < 0x00000008) {
            if (debug) console.log("Not valid TIFF data! (First offset less than 8)", file.getUint32(tiffOffset+4, !bigEnd));
            return false;
        }

        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);

        if (tags.ExifIFDPointer) {
            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);
            for (tag in exifData) {
                switch (tag) {
                    case "LightSource" :
                    case "Flash" :
                    case "MeteringMode" :
                    case "ExposureProgram" :
                    case "SensingMethod" :
                    case "SceneCaptureType" :
                    case "SceneType" :
                    case "CustomRendered" :
                    case "WhiteBalance" :
                    case "GainControl" :
                    case "Contrast" :
                    case "Saturation" :
                    case "Sharpness" :
                    case "SubjectDistanceRange" :
                    case "FileSource" :
                        exifData[tag] = StringValues[tag][exifData[tag]];
                        break;

                    case "ExifVersion" :
                    case "FlashpixVersion" :
                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);
                        break;

                    case "ComponentsConfiguration" :
                        exifData[tag] =
                            StringValues.Components[exifData[tag][0]] +
                            StringValues.Components[exifData[tag][1]] +
                            StringValues.Components[exifData[tag][2]] +
                            StringValues.Components[exifData[tag][3]];
                        break;
                }
                tags[tag] = exifData[tag];
            }
        }

        if (tags.GPSInfoIFDPointer) {
            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);
            for (tag in gpsData) {
                switch (tag) {
                    case "GPSVersionID" :
                        gpsData[tag] = gpsData[tag][0] +
                            "." + gpsData[tag][1] +
                            "." + gpsData[tag][2] +
                            "." + gpsData[tag][3];
                        break;
                }
                tags[tag] = gpsData[tag];
            }
        }

        // extract thumbnail
        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);

        return tags;
    }

   function findXMPinJPEG(file) {

        if (!('DOMParser' in self)) {
            // console.warn('XML parsing not supported without DOMParser');
            return;
        }
        var dataView = new DataView(file);

        if (debug) console.log("Got file of length " + file.byteLength);
        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
           if (debug) console.log("Not a valid JPEG");
           return false; // not a valid jpeg
        }

        var offset = 2,
            length = file.byteLength,
            dom = new DOMParser();

        while (offset < (length-4)) {
            if (getStringFromDB(dataView, offset, 4) == "http") {
                var startOffset = offset - 1;
                var sectionLength = dataView.getUint16(offset - 2) - 1;
                var xmpString = getStringFromDB(dataView, startOffset, sectionLength)
                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;
                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );

                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10
                //Many custom written programs embed xmp/xml without any namespace. Following are some of them.
                //Without these namespaces, XML is thought to be invalid by parsers
                xmpString = xmpString.slice(0, indexOfXmp)
                            + 'xmlns:Iptc4xmpCore="http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/" '
                            + 'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" '
                            + 'xmlns:tiff="http://ns.adobe.com/tiff/1.0/" '
                            + 'xmlns:plus="http://schemas.android.com/apk/lib/com.google.android.gms.plus" '
                            + 'xmlns:ext="http://www.gettyimages.com/xsltExtension/1.0" '
                            + 'xmlns:exif="http://ns.adobe.com/exif/1.0/" '
                            + 'xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#" '
                            + 'xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#" '
                            + 'xmlns:crs="http://ns.adobe.com/camera-raw-settings/1.0/" '
                            + 'xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/" '
                            + 'xmlns:Iptc4xmpExt="http://iptc.org/std/Iptc4xmpExt/2008-02-29/" '
                            + xmpString.slice(indexOfXmp)

                var domDocument = dom.parseFromString( xmpString, 'text/xml' );
                return xml2Object(domDocument);
            } else{
             offset++;
            }
        }
    }

    function xml2json(xml) {
        var json = {};
      
        if (xml.nodeType == 1) { // element node
          if (xml.attributes.length > 0) {
            json['@attributes'] = {};
            for (var j = 0; j < xml.attributes.length; j++) {
              var attribute = xml.attributes.item(j);
              json['@attributes'][attribute.nodeName] = attribute.nodeValue;
            }
          }
        } else if (xml.nodeType == 3) { // text node
          return xml.nodeValue;
        }
      
        // deal with children
        if (xml.hasChildNodes()) {
          for(var i = 0; i < xml.childNodes.length; i++) {
            var child = xml.childNodes.item(i);
            var nodeName = child.nodeName;
            if (json[nodeName] == null) {
              json[nodeName] = xml2json(child);
            } else {
              if (json[nodeName].push == null) {
                var old = json[nodeName];
                json[nodeName] = [];
                json[nodeName].push(old);
              }
              json[nodeName].push(xml2json(child));
            }
          }
        }
        
        return json;
    }

    function xml2Object(xml) {
        try {
            var obj = {};
            if (xml.children.length > 0) {
              for (var i = 0; i < xml.children.length; i++) {
                var item = xml.children.item(i);
                var attributes = item.attributes;
                for(var idx in attributes) {
                    var itemAtt = attributes[idx];
                    var dataKey = itemAtt.nodeName;
                    var dataValue = itemAtt.nodeValue;

                    if(dataKey !== undefined) {
                        obj[dataKey] = dataValue;
                    }
                }
                var nodeName = item.nodeName;

                if (typeof (obj[nodeName]) == "undefined") {
                  obj[nodeName] = xml2json(item);
                } else {
                  if (typeof (obj[nodeName].push) == "undefined") {
                    var old = obj[nodeName];

                    obj[nodeName] = [];
                    obj[nodeName].push(old);
                  }
                  obj[nodeName].push(xml2json(item));
                }
              }
            } else {
              obj = xml.textContent;
            }
            return obj;
          } catch (e) {
              console.log(e.message);
          }
    }

    EXIF.enableXmp = function() {
        EXIF.isXmpEnabled = true;
    }

    EXIF.disableXmp = function() {
        EXIF.isXmpEnabled = false;
    }

    EXIF.getData = function(img, callback) {
        if (((self.Image && img instanceof self.Image)
            || (self.HTMLImageElement && img instanceof self.HTMLImageElement))
            && !img.complete)
            return false;

        if (!imageHasData(img)) {
            getImageData(img, callback);
        } else {
            if (callback) {
                callback.call(img);
            }
        }
        return true;
    }

    EXIF.getTag = function(img, tag) {
        if (!imageHasData(img)) return;
        return img.exifdata[tag];
    }
    
    EXIF.getIptcTag = function(img, tag) {
        if (!imageHasData(img)) return;
        return img.iptcdata[tag];
    }

    EXIF.getAllTags = function(img) {
        if (!imageHasData(img)) return {};
        var a,
            data = img.exifdata,
            tags = {};
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                tags[a] = data[a];
            }
        }
        return tags;
    }
    
    EXIF.getAllIptcTags = function(img) {
        if (!imageHasData(img)) return {};
        var a,
            data = img.iptcdata,
            tags = {};
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                tags[a] = data[a];
            }
        }
        return tags;
    }

    EXIF.pretty = function(img) {
        if (!imageHasData(img)) return "";
        var a,
            data = img.exifdata,
            strPretty = "";
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                if (typeof data[a] == "object") {
                    if (data[a] instanceof Number) {
                        strPretty += a + " : " + data[a] + " [" + data[a].numerator + "/" + data[a].denominator + "]\r\n";
                    } else {
                        strPretty += a + " : [" + data[a].length + " values]\r\n";
                    }
                } else {
                    strPretty += a + " : " + data[a] + "\r\n";
                }
            }
        }
        return strPretty;
    }

    EXIF.readFromBinaryFile = function(file) {
        return findEXIFinJPEG(file);
    }

    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
            return EXIF;
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
}.call(this));



/***/ }),

/***/ "uGxA":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getImgMsg;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__ = __webpack_require__("//Fk");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_exif_js__ = __webpack_require__("sbrb");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_exif_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_exif_js__);


var headerImage = void 0;

function getImgMsg(file) {
    return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (resolve) {
        var Orientation = void 0;
        //获取拍照时的信息，解决拍出来的照片旋转问题
        //需要在getData执行完成后的回调函数中获取Orientation
        var getOrientation = new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (res) {
            __WEBPACK_IMPORTED_MODULE_1_exif_js___default.a.getData(file, function () {
                Orientation = __WEBPACK_IMPORTED_MODULE_1_exif_js___default.a.getTag(this, 'Orientation');
                console.log('Orientation=', Orientation);
                res(Orientation);
            });
        });
        //在获取照片信息成功后，调用imageLoad，对照片进行操作
        getOrientation.then(function (res) {
            imageLoad(file, res).then(function (headerImage) {
                resolve(headerImage);
            });
        });
    });
}

function imageLoad(file, Orientation) {
    // 看支持不支持FileReader
    if (!file || !window.FileReader) return;

    if (/^image/.test(file.type)) {
        // 创建一个reader
        var reader = new FileReader();
        // 将图片2将转成 base64 格式
        reader.readAsDataURL(file);
        // 读取成功后的回调
        return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (res, rec) {
            reader.onloadend = function () {
                var result = this.result;
                var img = new Image();
                img.src = result;
                img.onload = function () {
                    var data = compress(img, Orientation);
                    headerImage = data;
                    res(headerImage);
                };
            };
        });
    }
}

//旋转图片
function compress(img, Orientation) {
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext('2d');
    //瓦片canvas
    var tCanvas = document.createElement("canvas");
    var tctx = tCanvas.getContext("2d");
    var initSize = img.src.length;
    var width = img.width;
    var height = img.height;
    //如果图片大于四百万像素，计算压缩比并将大小压至400万以下
    var ratio = void 0;
    console.log(width * height);
    if ((ratio = width * height / 6000000) > 1) {
        console.log("大于600万像素");
        ratio = Math.sqrt(ratio);
        width /= ratio;
        height /= ratio;
    } else {
        ratio = 1;
    }
    canvas.width = width;
    canvas.height = height;
    //        铺底色
    ctx.fillStyle = "#fff";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    //如果图片像素大于100万则使用瓦片绘制
    var count = void 0;
    if ((count = width * height / 2000000) > 1) {
        console.log("超过200W像素");
        count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片
        //            计算每块瓦片的宽和高
        var nw = ~~(width / count);
        var nh = ~~(height / count);
        tCanvas.width = nw;
        tCanvas.height = nh;
        for (var i = 0; i < count; i++) {
            for (var j = 0; j < count; j++) {
                tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);
                ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);
            }
        }
    } else {
        console.log(width * height);
        ctx.drawImage(img, 0, 0, width, height);
    }
    //修复ios上传图片的时候 被旋转的问题
    if (Orientation != "" && Orientation != 1) {
        switch (Orientation) {
            case 6:
                //需要顺时针（向左）90度旋转
                // rotateImg(img, 'left', canvas);
                break;
            case 8:
                //需要逆时针（向右）90度旋转
                rotateImg(img, 'right', canvas);
                break;
            case 3:
                //需要180度旋转
                rotateImg(img, 'right', canvas); //转两次
                rotateImg(img, 'right', canvas);
                break;
        }
    }
    //进行最小压缩
    var ndata = canvas.toDataURL('image/jpeg', 0.5);
    tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;
    return ndata;
}
function rotateImg(img, direction, canvas) {
    //最小与最大旋转方向，图片旋转4次后回到原方向
    var min_step = 0;
    var max_step = 3;
    if (img == null) return;
    //img的高度和宽度不能在img元素隐藏后获取，否则会出错
    var height = img.height;
    var width = img.width;
    var step = 2;
    if (step == null) {
        step = min_step;
    }
    if (direction == 'right') {
        step++;
        //旋转到原位置，即超过最大值
        step > max_step && (step = min_step);
    } else {
        step--;
        step < min_step && (step = max_step);
    }
    //旋转角度以弧度值为参数
    var degree = step * 90 * Math.PI / 180;
    var ctx = canvas.getContext('2d');
    switch (step) {
        case 0:
            canvas.width = width;
            canvas.height = height;
            ctx.drawImage(img, 0, 0);
            break;
        case 1:
            canvas.width = height;
            canvas.height = width;
            ctx.rotate(degree);
            ctx.drawImage(img, 0, -height);
            break;
        case 2:
            canvas.width = width;
            canvas.height = height;
            ctx.rotate(degree);
            ctx.drawImage(img, -width, -height);
            break;
        case 3:
            canvas.width = height;
            canvas.height = width;
            ctx.rotate(degree);
            ctx.drawImage(img, -width, 0);
            break;
    }
}

/***/ })

});